1
00:00:00,000 --> 00:00:01,000
翻译-遗落星痕 Ice北极熊
时间轴-Ice北极熊 视频 - Joc

2
00:00:01,000 --> 00:00:04,416
-Alright, we survived the crud -Yeah, we did
-终于，我们完成了 CRUD -是的，我们做到了

3
00:00:04,416 --> 00:00:05,952
Create, read, update, delete
创建，读取，更新，删除

4
00:00:06,080 --> 00:00:10,304
We are going to add in some logging, do a little Application Insights locally
接下来，我们将来添加日志功能，并在本地执行 Application Insights

5
00:00:10,304 --> 00:00:15,808
and then in the process of doing logging, I also want to add a little thing called Temp Data
然后在记录日志的过程中，我还想添加一个名为 Temp Data 的小东西

6
00:00:15,872 --> 00:00:19,392
Because I was noticing that when we did the create
因为我注意到，若在我们进行创建的时候

7
00:00:20,032 --> 00:00:24,640
it'd be nice to have a little message that said the answer was created or whatever
能有一条消息表示正在创建或者其他提示，这样会更友好

8
00:00:24,704 --> 00:00:25,600
Yeah, that would be nice.
嗯嗯，听起来不错

9
00:00:25,650 --> 00:00:25,664
但这并不是模型的一部分，因此这会带来一些有趣的问题

11
10
But that's not really part of the model cuz that brings up some interesting questions
但这并不是模型的一部分，因此这会带来一些有趣的问题

12
11
But that's not really part of the model cuz that brings up some interesting questions

13
00:00:30,144 --> 00:00:36,800
12
例如，如果我们回到 Create 页面，对此我们都还有印象，是吧

14
00:00:37,440 --> 00:00:47,232
13
我们输入名称，然后点击提交，在让我们看下相关的页面模型

15
00:00:47,488 --> 00:00:48,960
14
一目了然，对吧

16
00:00:49,024 --> 00:00:53,184
15
我们有使用了 BindProperty 属性的用户，就像你说的

17
00:00:54,125 --> 00:00:55,175
16
幸存的旅程

18
00:00:55,175 --> 00:00:59,904
17
幸存下来的旅程，但我们希望有一些像临时数据之类的

19
00:00:59,904 --> 00:01:02,464
18
消息提示我们，用户添加成功了

20
00:01:02,656 --> 00:01:05,856
19
所以我们可以添加一个字符串变量叫做 message

21
00:01:06,112 --> 00:01:13,088
20
这很有趣，因为它是页面模型的一部分，但不是数据库的一部分

22
00:01:13,152 --> 00:01:17,632
21
这是页面模型的一部分，它有点像视图模型

23
00:01:17,888 --> 00:01:21,280
22
这实际上是一段临时的数据

24
00:01:22,112 --> 00:01:28,192
23
这就是 Tempdata ，他们将在这储存相应的值，然后可以在另一个页面中访问

25
00:01:28,192 --> 00:01:29,600
24
所以这就像是一个车斗，或者说是便利贴

26
00:01:29,600 --> 00:01:33,056
25
这种思考问题的角度很不错。是的

27
00:01:33,056 --> 00:01:34,848
26
很好，这就是一个放东西的地方

28
00:01:34,848 --> 00:01:39,072
27
首先，我要保存数据库，就像我们之前那样保存数据，然后

29
00:01:39,072 --> 00:01:40,992
28
你会收到一条消息

30
00:01:40,992 --> 00:01:46,240
29
我将收到一些消息并提示，嘿，Customer ，在这里你可以自定义一些东西

31
00:01:46,240 --> 00:01:48,800
30
-Customer.Name -added

32
00:01:48,928 --> 00:01:53,024
31
-这是一条消息，对吗？ -它可以来自你想要的任何东西

33
00:01:53,024 --> 00:01:58,144
32
它可以是生成的，而在这里我们将拼接文本与来自表单的数据

34
00:01:58,144 --> 00:02:03,136
33
然后回过头我们再来看下这个 message ， message 并不是数据库的一部分

35
00:02:03,136 --> 00:02:08,128
34
所以，在这个简单的实例中，你使用的是 TempData ，而不必访问数据库

36
00:02:08,192 --> 00:02:12,736
35
是的，因为我提交了表单，而实际上我从来没有把它存到数据库的任何地方

37
00:02:12,800 --> 00:02:19,475
36
如果我没有在上面添加 TempData ，那它永远都不会保存下来，也不会

38
00:02:19,750 --> 00:02:28,096
37
但是因为它是在页面模型上的 public 属性，所以我可以在其他地方使用它，对吗？

39
00:02:28,608 --> 00:02:32,832
38
让我们回过头来，想一想

40
00:02:34,944 --> 00:02:38,080
39
-是该到你的索引页面了吧？ -是的，谢谢

41
00:02:38,080 --> 00:02:39,872
40
我花了一秒钟让我的头脑清醒了一下

42
00:02:40,225 --> 00:02:45,184
41
所以在索引页面上，我们也会添加一条消息

43
00:02:49,664 --> 00:02:52,736
42
那会获得那些临时数据吧？

44
00:02:53,475 --> 00:03:04,512
43
然后在这里，也许我们需要一些，就把它放在表格的顶部，比如说是 H3 标签

45
00:03:05,550 --> 00:03:10,592
44
-以及一些消息？ -@Model.Message

46
00:03:11,750 --> 00:03:13,918
45
所以它将是这样，也许在消息不存在的时候

47
00:03:13,918 --> 00:03:17,151
46
我们会想隐藏它，我们可以做很多的事情，但现在

48
00:03:17,151 --> 00:03:18,784
47
现在，只需一秒钟，我们这样就可以了

49
00:03:20,025 --> 00:03:23,600
48
但这只是一个例子，它与数据库无关

50
00:03:23,600 --> 00:03:26,848
49
你并不想把数据临时保存到数据库中，仅仅是想找个地方临时保存下数据

51
00:03:27,775 --> 00:03:29,600
50
一些用户的操作信息

52
00:03:29,600 --> 00:03:35,163
51
-嗯，是的，这是一种常见的想法，这就可以了 -这些就是了

53
00:03:35,163 --> 00:03:36,603
52
这可以你想要的任意的东西，或者你想对它做任何操作都行

54
00:03:36,603 --> 00:03:42,464
53
它可以通过 jQuery 或动画添加淡入效果，或任何你喜欢的东西

55
00:03:42,950 --> 00:03:52,192
54
-（刷新后）这与刚才不同，这是默认状态，对吗 -让我们再来试一次，看到了吗

56
00:03:54,304 --> 00:04:02,624
55
这是因为它被称为临时数据，我们在这里和它最初定义的地方有相同的名称

57
00:04:02,624 --> 00:04:08,896
56
所以它就很神奇地来到了索引页面，多么贴心的功能啊

58
00:04:11,025 --> 00:04:14,976
57
现在我们非常非常简短地来谈谈有关日志的事

59
00:04:14,976 --> 00:04:18,125
58
-我们不会在日志中真正的做什么 -让我们来看下这个

60
00:04:18,125 --> 00:04:20,800
59
-在这我们可以看到了 -我们看到了两种不同的日志记录

61
00:04:20,864 --> 00:04:28,288
60
-我们看完了这个 -然后我们看到了更多信息

62
00:04:28,288 --> 00:04:32,050
61
这些是警告的等级，然后这些是

63
00:04:34,225 --> 00:04:36,575
62
哎呀，原谅我

64
00:04:36,575 --> 00:04:39,104
63
哦，这就是了

65
00:04:39,104 --> 00:04:42,691
64
这里有警告，有调试，而且你可以有不同的小节

66
00:04:42,691 --> 00:04:48,768
65
你可以说，我只想要来自微软的信息，但我希望得到其他人的调试信息，对吧？

67
00:04:49,275 --> 00:04:51,328
66
那么我们来看看，我们是否可以弄清楚如何记录日志

68
00:04:54,656 --> 00:05:02,464
67
好的，我们回到了这里，我将尝试记住如何从头开始

69
00:05:03,275 --> 00:05:04,960
68
你能告诉我该怎么做嘛

70
00:05:04,960 --> 00:05:06,560
69
你要试着记住吗

71
00:05:06,560 --> 00:05:07,584
70
嗯，你懂得

72
00:05:08,075 --> 00:05:12,192
71
我只是想做得对，而我一直没有把所有这些东西都放在脑海里

73
00:05:13,088 --> 00:05:15,050
72
这里应该是 ILogger 吧

74
00:05:15,908 --> 00:05:18,848
73
是的，但你可能需要添加相应的服务

75
00:05:18,848 --> 00:05:20,650
74
好的，添加服务

76
00:05:20,650 --> 00:05:22,432
75
我们必须使用它

77
00:05:22,496 --> 00:05:24,864
76
`AddLogging` 就好了

78
00:05:27,552 --> 00:05:33,504
77
然后我们可以用 app ，我不认为它是这样用的

79
00:05:33,568 --> 00:05:37,088
78
你把它搞定了吗，是 ILogger 吗

80
00:05:37,152 --> 00:05:38,076
79
我认为这应该是 ILoggerFactory

81
00:05:38,076 --> 00:05:39,200
80
我想是的

82
00:05:42,925 --> 00:05:44,832
81
-看到了吗？ -是的，你必须添加扩展

83
00:05:44,832 --> 00:05:46,496
82
这部分脱离出来变成了拓展，这很好

84
00:05:47,456 --> 00:05:49,888
83
极客们的工作是它变得更好

85
00:05:49,888 --> 00:05:51,040
84
那这样就好了

86
00:05:55,456 --> 00:06:04,160
85
然后我们只需这样，嘿， loggerFactory ，如果我在控制台中记录日志，我可以添加控制台

87
00:06:04,992 --> 00:06:07,040
86
而且你可以记录到各种各样的地方，比如说文件

88
00:06:07,040 --> 00:06:10,048
87
或者 Application Insights ，如果你愿意的话，各种东西都行

89
00:06:10,048 --> 00:06:17,088
88
如果你使用 Application Insights ，那它会需要一些参数

90
00:06:17,152 --> 00:06:20,608
89
现在，我就使用了 `AddConsole` 和 `AddDebug`

91
00:06:24,256 --> 00:06:26,432
90
你还需要第一行代码吗？

92
00:06:26,925 --> 00:06:34,304
91
这行代码是在我从命令行运行的时候想要输出日志，那我想我会需要它

93
00:06:34,432 --> 00:06:36,480
92
-那么这是一个选择吗 -嗯，是的

94
00:06:36,480 --> 00:06:40,875
93
若我或者我团队中的某人在控制台中运行时，我希望向他们输出些信息

95
00:06:40,875 --> 00:06:42,475
94
在有可能的情况下，向控制台输出

96
00:06:42,475 --> 00:06:44,775
95
所以我想说的是你不需要同时有两个，对吗

97
00:06:44,775 --> 00:06:50,496
96
不不，在这我指的是我正在将日志输出到多个位置

98
00:06:50,875 --> 00:06:53,824
97
我可以把它输出到 app insights ，文本文件，或者是数据库

99
00:06:54,150 --> 00:06:56,192
98
这很奇怪，但我能做到这一点

100
00:06:56,192 --> 00:07:00,700
99
所以现在我把日志输出到了两个地方，原谅我

101
00:07:01,300 --> 00:07:08,350
100
是的，这样做很酷，然后，在一个我可能想要使用它的地方

102
00:07:09,575 --> 00:07:11,872
101
还记得我们之前如何把所有东西放在一行代码中嘛

103
00:07:13,408 --> 00:07:19,616
102
我们要把它展开，我想我会用 private ILogger

104
00:07:22,880 --> 00:07:40,425
103
我认为它将是 CreateModel 类型，我只需键入 Log ，然后我们需要 ILogger<CreateModel> log

105
00:07:40,425 --> 00:07:42,208
104
之后我们再次换行

106
00:07:42,784 --> 00:07:48,550
105
现在这里我用了不同的风格，这里这个人使用的 _db ，我用的大写的 L

107
00:07:48,550 --> 00:07:51,296
106
你应该选择一种风格并坚持下去

108
00:07:51,296 --> 00:07:54,475
107
-那么下划线真的只是一种风格吗？ -这只是一种风格

109
00:07:54,475 --> 00:07:57,150
108
就是说这是私有的，或者它是只读的，或是内部的

110
00:07:57,150 --> 00:07:58,656
109
很多人都有不同的风格

111
00:07:59,200 --> 00:08:01,800
110
公开属性最好以大写开头

112
00:08:02,500 --> 00:08:06,784
111
曾经有一段时间我们使用 m_ 来标记私有成员

113
00:08:06,912 --> 00:08:11,712
112
现在人们有时把 _ 用于内部或只读变量

114
00:08:12,032 --> 00:08:15,808
113
我只想说我应该对我命名的方式更负责任

115
00:08:15,808 --> 00:08:16,832
114
-是的，你应该的 -我会的

116
00:08:20,950 --> 00:08:22,720
115
这个字符串就在这里

117
00:08:28,608 --> 00:08:32,384
116
我可以重用它，然后把它换成日志，对吗

118
00:08:32,384 --> 00:08:34,624
117
-我可以用 log -不同的日志等级

119
00:08:34,624 --> 00:08:37,750
118
是的，我可以用 LogInformation ， LogDebug ， LogCritical

120
00:08:38,175 --> 00:08:40,256
119
让我们用 critical 级别吧，虽然这完全不重要

121
00:08:40,675 --> 00:08:42,368
120
但我可以说，这里出现了一些问题

122
00:08:42,432 --> 00:08:44,352
121
客户也会说，我的天哪

123
00:08:44,675 --> 00:08:47,872
122
对，然后，它可能会变红，对吧

124
00:08:49,344 --> 00:08:50,880
123
实际上这值得我们去尝试一下

125
00:08:51,520 --> 00:08:53,625
124
所以，如果是一个 Web 应用

126
00:08:54,925 --> 00:09:01,025
125
-我的 Web 应用在哪里 -它在这儿

127
00:09:01,425 --> 00:09:05,284
126
那么让我们去那个地方

128
00:09:06,375 --> 00:09:08,164
127
我将尝试在命令行中执行 dotnet run

129
00:09:10,200 --> 00:09:13,575
128
这是一个很好的提醒，你可以在 Visual Studio 中做这些事情

130
00:09:13,875 --> 00:09:16,864
129
或者你可以跳回命令行操作

131
00:09:16,864 --> 00:09:19,872
130
-这也很酷 -它给了你 64005端口

132
00:09:29,075 --> 00:09:33,760
131
哦不，让我把它放在那里，把它放在这里

133
00:09:38,688 --> 00:09:46,304
132
-它在那， critical -很好，这是控制台的形式

134
00:09:47,000 --> 00:09:50,912
133
之前提到过的想法，就是信息可以向多个不同的地方输出

135
00:09:51,975 --> 00:09:56,200
134
-所以让我们关闭它 -我们可以在调试中看到它

136
00:09:56,200 --> 00:10:01,216
135
然后让我们在 Application Insights 中进行操作

137
00:10:02,625 --> 00:10:04,416
136
你也可以看到调试器，对吗

138
00:10:04,480 --> 00:10:08,320
137
关键是，这条信息流正在向外传播

139
00:10:08,320 --> 00:10:10,816
138
它可以进入命令行，一个窗口

140
00:10:10,816 --> 00:10:13,632
139
或是 Windows Debug 文本文件，这完全取决于你

141
00:10:17,200 --> 00:10:23,488
140
好吧，所以，我要关掉一下标签页

142
00:10:23,936 --> 00:10:29,056
141
-这太多了，已经影响到我了 -好的，回到这里

143
00:10:29,056 --> 00:10:35,456
142
我要点击右键使用，添加 > Application Insights

144
00:10:35,456 --> 00:10:40,896
143
-而且你已经做过好几次了 -不过这是诀窍

145
00:10:40,960 --> 00:10:46,528
144
你可以这样做，注册一个 Azure 账号，你会发现这是免费的，大概会有 1G 的流量

146
00:10:46,528 --> 00:10:52,224
145
-就是这样 -在那里，我们将注册你的应用

147
00:10:52,224 --> 00:10:55,744
146
即使你在本地运行应用，也可以将遥测数据发送到云端

148
00:10:55,808 --> 00:10:57,664
147
我们稍后会这样做

149
00:10:57,950 --> 00:11:02,848
148
但我希望向大家指出的是这并不是必须的，是吧

150
00:11:02,912 --> 00:11:04,640
149
他们希望你注册

151
00:11:04,704 --> 00:11:06,560
150
而且我认为你注册是值得的

152
00:11:07,000 --> 00:11:11,424
151
-但是，你只尝试在本地运行也没问题的 -这也不错

153
00:11:11,808 --> 00:11:15,968
152
因此，你可以尝试只在本地运行，这意味着你的数据不会被发送到云端

154
00:11:16,224 --> 00:11:20,192
153
但你可以把这些数据导出来放到任意地方

155
00:11:20,192 --> 00:11:21,408
154
比如，你可以向某人发送报告

156
00:11:21,472 --> 00:11:28,512
155
当然，重点是云可以为你提供更多洞察力，它可以提供所有的分析功能

157
00:11:28,512 --> 00:11:31,008
156
而且你在云中拥有无限的空间

158
00:11:31,008 --> 00:11:32,864
157
我记得这些都是免费的

159
00:11:32,864 --> 00:11:37,216
158
然后，除此之外，你还可以在云中执行各种不能在本地执行的操作

160
00:11:37,216 --> 00:11:42,336
159
但我要说的是，没有理由不在本地尝试

161
00:11:42,336 --> 00:11:45,024
160
这样即使在没有网络的飞机上，你也可以用它做出惊奇的东西

162
00:11:45,024 --> 00:11:48,544
161
-你知道我的意思吧 -所以，让我们去运行它

163
00:11:48,608 --> 00:11:52,576
162
-你刚刚在一些应用内部添加了些什么 -嗯，问得好

164
00:11:52,640 --> 00:11:59,296
163
通过执行前面的步骤，我添加了一个包，且它会将它自己添加到 pipeline 中

165
00:12:01,025 --> 00:12:03,840
164
因此，你不必手动将其添加到 pipeline 中

166
00:12:03,840 --> 00:12:07,168
165
-它会默认自动添加 -是的，这很神奇

167
00:12:07,168 --> 00:12:13,504
166
我想实际上我们可以看看它，让我们转到那里

168
00:12:17,152 --> 00:12:18,624
167
这个文件在什么地方呢

169
00:12:21,888 --> 00:12:25,728
168
csproj 在这里，我们可以打开它

170
00:12:27,456 --> 00:12:29,184
169
-它就是了 -好的，好的

171
00:12:29,184 --> 00:12:30,784
170
所以它只是一个包

172
00:12:30,784 --> 00:12:34,752
171
一旦它添加之后，就会添加到 pipeline

173
00:12:34,752 --> 00:12:36,672
172
它会收集各种东西

174
00:12:36,672 --> 00:12:40,768
173
现在我可以去真正地查询我的应用

175
00:12:40,768 --> 00:12:43,008
174
-它现在正在运行 -应该清理一下

176
00:12:43,750 --> 00:12:46,775
175
我们去创建一些内容

177
00:12:49,125 --> 00:12:52,608
176
我会进入到这，注意看，这些数字正在逐渐增加

178
00:12:53,100 --> 00:12:54,336
177
让我再来一遍

179
00:12:54,336 --> 00:12:55,500
178
添加一个新的东西

180
00:13:00,000 --> 00:13:01,888
179
这些事件正在发生

181
00:13:03,100 --> 00:13:04,768
180
我可以点击它，这就是你想要的

182
00:13:05,472 --> 00:13:11,232
181
-这很贴心 -我可以看到请求以及跟踪的数量

183
00:13:12,832 --> 00:13:14,432
182
你可以对它进行过滤吗

184
00:13:14,496 --> 00:13:22,304
183
当然，你可以过滤，只是告诉我创建的信息，或是使用这个版本的人，或是使用 Chrome 的人

185
00:13:22,304 --> 00:13:28,192
184
或是使用 Firefox 的人，或是执行超过一秒的事情，对吧

186
00:13:28,768 --> 00:13:30,688
185
你可以在这里查看整个列表

187
00:13:31,008 --> 00:13:32,608
186
我可以进行查找，看

188
00:13:32,736 --> 00:13:35,488
187
然后它有这个非常友好的图标，让你你知道什么是对的

189
00:13:35,488 --> 00:13:38,112
188
看，还记得我们是怎样为添加客户添加一条 critical 日志的吗

190
00:13:38,825 --> 00:13:43,552
189
我还能双击这一条独立的追踪，对吧

191
00:13:43,552 --> 00:13:48,032
190
那么，我们可以看到计算机的名称和操作

192
00:13:51,650 --> 00:13:53,536
191
看，这些是问题的严重程度和操作

193
00:13:53,536 --> 00:13:57,312
192
我还可以这样做，显示这个用户的所有遥测数据

194
00:13:57,312 --> 00:14:01,100
193
你可以会有这样的情况，比如，我有一堆的用户触发了这个事件

195
00:14:01,425 --> 00:14:05,696
194
在这一些有共同点的本地信息将会出现，然后你就知道云端的好处了

196
00:14:05,696 --> 00:14:08,448
195
但其中一个很好的选项是，当发送一些事时

197
00:14:08,875 --> 00:14:10,240
196
Beyonce 已被添加

198
00:14:10,240 --> 00:14:13,440
197
向我展示前后5分钟的遥测数据

199
00:14:14,300 --> 00:14:18,176
198
对吧，因为 bug 可能不是她的问题，而是环境的问题

200
00:14:18,176 --> 00:14:19,904
199
在她周围，或者更远的地方

201
00:14:22,825 --> 00:14:26,155
200
然后，我可以随着时间的推移去绘制这些东西

202
00:14:26,155 --> 00:14:27,499
201
同样，这都是本地的

203
00:14:27,499 --> 00:14:28,461
202
这是你在当地获得的东西

204
00:14:28,461 --> 00:14:34,176
203
然后，当你想要更多的信息时， Application Insights 门户中有各种各样的好东西

205
00:14:34,240 --> 00:14:35,525
204
这会帮你打开一个链接，对吧

206
00:14:35,525 --> 00:14:37,760
205
链接就在那里，你可以去试一下

207
00:14:37,760 --> 00:14:43,840
206
我们将在另一个谈话中探讨一堆这些东西，看这儿

208
00:14:44,100 --> 00:14:49,408
207
在这里，当你登录时，你可以选择你的资源，然后查看依赖项

209
00:14:49,408 --> 00:14:53,120
208
你的应用如何与数据库交互，调用另一个 Web API

210
00:14:53,184 --> 00:14:55,744
209
如果你没有把它放在云中，你就无法做到

211
00:14:55,808 --> 00:14:59,027
210
在这里，我刚刚添加了一个过滤器，我只选中了 Create 页面的数据

212
00:14:59,027 --> 00:15:00,225
211
我可以关闭那个过滤器

213
00:15:01,125 --> 00:15:03,360
212
只展示花时最长的操作

214
00:15:03,750 --> 00:15:04,960
213
过滤掉那些

215
00:15:05,728 --> 00:15:07,342
214
这些就是记录，你可以进一步查看

216
00:15:07,342 --> 00:15:10,144
215
其中一个请求花了很长时间，点击它

217
00:15:10,550 --> 00:15:12,192
216
这是最初的请求

218
00:15:12,256 --> 00:15:15,776
217
它第一次编译该页面

219
00:15:16,544 --> 00:15:17,632
218
这样是不是很棒

220
00:15:17,632 --> 00:15:20,433
219
这真是太棒了，令人印象深刻

221
00:15:20,433 --> 00:15:21,900
220
我非常喜欢 Application Insights

222
00:15:22,496 --> 00:15:26,450
221
很酷，所以，我觉得这让我们处于一个很好的观察视角，不是吗

223
00:15:26,450 --> 00:15:33,312
222
我们完成了一个不错的小型云应用，基本的 Bootstrap ，它正在与 Application Insights 交互，我们已经有了日志记录

224
00:15:33,312 --> 00:15:36,064
223
我认为这是一个非常好的初学者入门教程，你不觉得嘛

225
00:15:36,128 --> 00:15:39,776
224
是的，在过去的几个小时里，我们已经完成了很多的工作

226
00:15:39,776 --> 00:15:40,544
225
那他们现在应该去哪

227
00:15:40,608 --> 00:15:42,976
226
-文档 -文档，去看文档吧

228
00:15:42,976 --> 00:15:45,728
227
转到 docs.microsoft.com ，开始吧

229
00:15:45,728 --> 00:15:49,696
228
那有很棒的样例以及很棒的互动体验

230
00:15:49,696 --> 00:15:53,792
229
如果你看到了这里，请给 Hanselman 一个掌声

231
00:15:53,792 --> 00:15:56,600
230
是的，在推特上给予我们鼓励

232
00:15:56,600 --> 00:15:57,425
231
在 Twitter 上

233
00:15:57,425 --> 00:15:59,104
232
我和 Maria

234
00:15:59,104 --> 00:16:02,880
233
并且一定要浏览 Microsoft Virtual Academy 中的所有不同的优秀课程

235
00:16:02,880 --> 00:16:05,056
234
这只是对于初学者的 ASP.NET Core 教程

236
00:16:05,056 --> 00:16:13,888
235
我们有面向初学者的 C＃ ，各种基于云的很棒的内容，以及中级和高级的内容等等

237
00:16:14,016 --> 00:16:17,600
236
非常感谢你在 Microsoft Virtual Academy 上与我们共度一天

