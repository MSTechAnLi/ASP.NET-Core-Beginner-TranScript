时间轴 - Ice 北极熊
欢迎回来，让我们继续来关注页面
在之前的模块中，我们着眼于构建我们第一个空的 Web 应用程序
但它并没有太大的作用，对吧
它只是返回一个字符串
当我考虑构建一个页面时，不知道你是不是跟我一样这么想
当然是的
我想看到一些 HTML 页面
我想看到一个可见的页面结构，并且如果你回到项目文件夹
在我们所有的文件中，我没有看到一个页面
对，现在这并不是专注于网页，它专注于字符串
虽然我可以修改字符串，也许可以添加加粗效果， Beyonce ，这会很快让人疯掉的
所以，我们需要一个专注于页面的框架
确实如此
现在让我们往上回滚一小部分，你谈到了 ConfigureServices 和 Configure
然后我们要在这里配置我们的第一个服务
嗯，所以，如果你输入 services.AddMVC
在我输入 services.Add 之后，我得到了所有这些选择
我们之前也看到过
这些不同的选项都会在 VS Code 上弹出显示（指代码提示）
所以重要的是要理解，就像我们之前所说的那样，当我们回到 Program.cs
这只是一个 Main 函数，记得我们之前做过一个控制台应用程序
但我们正在构建服务的 pipeline
那么你想要我添加什么样的服务
MVC AddMVC
这将添加所有可能想要用的 MVC 服务
好的，现在我已经把它添加上了
有一个波浪，然后波浪消失了
它是不是神奇地变成了 MVC 框架
不，请记住，我们配置我们的服务，然后我们需要配置
实际上，我们必须使用它
对的
我们添加它们，然后我们使用它们
我们要写 app.UseMvc 嘛
我认为我们不需要
值得指出的是，在这有所有不同的用途的 Use
确实有很多
这有你的 Facebook ，你的 Google
各类不同的，所谓的中间件
你会在这里的高级内容了解中间件
但是现在先让我们来使用一些中间件
有两个选项，默认路由或经常使用的 UseMvc ，我们在这就使用 UseMvc
有很多选项可以传入
稍后我们会谈谈一些关于路由的问题
看下 UseMvc
所以，现在 Mvc 在管道中
嗯，所以我们可以开始利用它
我不认为你会需要最后一行
好吧，让我们来看看它是否还能运行
我们所做的只是 AddMVC 和 UseMvc
Hello Beyhive 还会在吗
现在它被加粗了，因为我把它加粗了
因此，可以指出的是它正在管道中，但是它什么都没有改变
是的，因为在这里它没有被使用
好吧，我们还没有添加任何页面
所以，我并不这样想
因为我们将要使用 MVC 我并不认为我们会需要 app.Run
不过，我想保留在那里
如果你不介意的话
因为当我们添加我们的网页时，在默认路由的情况下，我想看到页面与此之间的关系
至于默认路由
如何默认路由不起作用，那么这些将被执行
就其意义而言，它将按顺序运行
这有合理吗
那么，让我们来完成你想添加的页面，
看看 Beyonce 是否会随机出现
对，你提到了一件对很多新手来说非常重要的事情
这是代码的编写顺序吗
这很重要，特别是当您依次添加和使用事物时
我相信，如果我们把 MVC 放在这里，我们将有非常不同的体验
没错
我们可以尝试添加一些东西
是的，再补充一些东西
好吧，我想要做的第一件事就是添加一个新文件夹
对的
嗯
在 Visual Studio Code 中的这个区域，我可以右击，然后新建文件夹，或者我可以点击这些按钮
当右击的时候会出现 New Folder ，是因为在当前点击的地方可以新建文件夹
当你看到显示 New Folder -你要在别的地方建文件夹嘛
它有时可能会在某个文件夹里面，要注意这一点
所以，我确认了我的 Pages 文件夹，你要求我添加，在同一级目录而不是在 wwwroot 中
或者任何其他地方
它可能有点混乱，是吗
所以，我有一个 Pages 文件夹
好的，现在我们实际上需要添加一个页面
所以如果你添加新文件，我们将添加一个 Index.cshtml
C# HTML
是的，我总是称它为 C# HTML
但是我被告知这是不对的
这没什么，它只是一个 RAZOR 页面
这只是一个 RAZOR 页面，是的
好的，忽略这个扩展拓展名
很明显，这就是 HTML
是吗 -的确如此
我想要做的第一件事就是添加一个页面指令
所以应该是 @page
好吧， @page ，所以指令以@开始
好 -是的
我们将在今天看到其中的好几个（指令），并且了解你可以用它们做什么
好滴
我们只是要写一些 HTML ，所以我们只需要使用 h1
好，我看到了非常棒的智能感知
Hello Beyonce
想象一下， Beyonce 是否真的通过这些视频学习了如何编程
我键盘上没有这些特殊符号
你想确保你
我得尊重她
你必须尊重 Bey
让我们继续吧
有一天，她会感激你的，当她看这个视频
当她看到这个后邀请我到她家吃午饭
好了，我还需要做其他事吗
嗯哼，你保存了吗
是的
让我们看看会发生什么，让我们来运行这个
加油，继续，让我看到它运行起来
它会监听 localhost:5000
嗯哼
哇
这很棒
所以 Index.cshtml 似乎是默认的（页面）
我想知道我是否可以改名
让我们试试看
然后点击刷新
哦不，你现在实际上应该
不不不，快看，该字符串是从哪里来的
它来自那行，让我们倒回去
是的，它来自第31行
对，所以这里要说的是 UseMvc 添加了一些默认路由及一些行为
我们所说的路由，就像是有 URL 进来一样，它必须决定谁来处理这件事
没错，如果你回到你的页面，并且你添加了 /fred ，它会显示什么
这是个很好的问题
对，好吧 现在我们开始对这种行为有所了解了
所以默认情况下，它被叫做 Index 这是一个特别的名称
而 MVC 在默认情况下，则会将它作为默认路由
对对
好的，如果我们添加了另一个页面，也许我们这里太疯狂了
Mm-hm ，想添加另一个被命名的页面
好吧，你想把它叫作什么
Solange
可以，或者 Rihanna ，都可以啦
好吧，这里有另一个
我认为这个页面会出现在 /Solange 对吗
没错
嗯哼
所以，我们只需将它放在段落标记中即可
看到 Visual Studio Code 是怎么帮助你的了吗
我应该在一开始就键入段落标记的开头
继续吧
我们所有都是默认的
我没有重新运行它吗
我想你没有
好吧，键入 dotnet run
这是我们的默认页面
另一个没有出现
这并不是
为什么我们不把它放在一个文件夹中
放在一个文件夹中，好吧
然后，将其称为 Index
所以，它必须是 Solange/Index 吗
不，因为 Index 是默认值
有意思
Hello Beyhive
让我们来想想
我们做错了什么
没关系，因为我们正在做一个做一个实验
在这过程中进行实验
我们正在了解这些如何运作，可哪里出错了，对吗
我们一起来解决它吧
所以，我刚刚改变了这里，我们之前做过 Fred
我知道哪里错了
快告诉我 -好吧，检查一下，朋友们，让我们回去把它改回 Solange
好的，这里是 Index
仔细看，这里只有几行
这是 Solange
我们没有放置页面指令
好极了
对的
非常有趣
有趣，那么 -实际上在程序运行时候它神奇地完成了这一切，如果没有这个页面指令
这个页面将永远不会显示
这意味着它没必要显示
不必通过这样执行
所以，这个坑我之前并不知道，但我凭直觉猜到了就是这样
可这一些东西
总会有初学者会遇到
是的，绝对会有的
这绝对是你将会遇到的
就像我们被它坑到一样，所以，我告诉你，要做的第一件事就是添加页面指令
是的，一定要记住
这实际上也是一个有关 Visual Studio 与 Visual Studio Code 有趣的地方
在稍后我们使用 Visual Studio
我们将使用内置的模板来添加内容
我们只需要创建一个新的 Razor Page 文件
没错
而且（模板）将会完成一部分的代码，因为我们仅是通过自己来完成这些文本文件
才碰到了这种错误，所以这真的很坑
这确实提出了有关文件夹的问题，我们为什么不尝试一下呢
让我们在那先创建一个文件夹，然后我们把它移动到这
没错
然后，将其重命名为默认值 Index
那么，如果你刷新页面的话
没错，是同一页面
但是如果我在这里改变它
只需探索一下，看起来就是这样
没有什么文件名是必须的，除了路径会不一样
所以，你的默认路由将是由路径，然后是另一条路径所组成，在这种情况下，默认页面就在那里，你看到了吗
是的，所以说路由就是文件夹结构喽
对，路由就是文件结构
一个专注于页面的框架是一个非常好的体验
这对我来说意义重大
就像你建立你的第一个 HTML 页面一样，这会是相同的体验
是的，一个在文件夹中的页面
这意味着，我们在稍后会做类似消费者，生产者，以及物品的（应用）
这一思路应该是非常清晰的
而这仅仅的静态的 HTML
我们应该再添加一些动态的东西
在我们进入下一节之前
那么，让我们来给予 Solange 更多的信息
我听说她在今天有一个音乐会
哦好，让我们假设在当前时刻，总是会有 Solange 的音乐会
那总有一个 -在任何时候
好的吧
我们将会加粗这一信息，我们该怎么说呢
音乐会将在什么时候开始，我不知道，下午3点可以吗
但我希望它可以是动态的
好吧
我应该怎么样让它显示现在的时刻
@DateTime
好吧，我再次用了 @
DateTime ，就像是 System.DateTime
.Now
很好，让我们回来看看，点击刷新，然后再次刷新
要迟到了，我得走了
你确实得走了，它刚开始
它现在刚开始
现在需要指出的是，注意我这样做的区别
保存，切换窗口，刷新
我不需要构建
确实没有 -对吧
对 Razor 页面来说，当它在改变后将会自动构建，而且能很快的响应
可如果我改变了 C# 文件，那我就需要重新构建项目
对的，但如果是页面自身发生了变化，你就不需要这样做
这些使用 C# HTML 开发的 Razor 页面
他们可以被复制到 host （运行应用程序的主机，或称宿主）
他们也可以是源码的一部分
但是这些 .cs 文件没有被复制到 host
事实上，他们被构建为 DLL 文件
好吧
对，这还有一个值得指出的要点
你可以看到这一过程，通过 dotnet build
我们在之前用的都是 dotnet run
对
看到了吗
看到它是如何指向你的 Web 应用了吗
这样说吧， mywebapp 就在这里
等下，我有一个问题问你
如果有人正在看我们的视频
就像他正在讲的 dll 这类东西
在哪可以让我们的观众了解更多
好的，这被叫做程序集
这是一个动态链接库，如果你想知道
程序集是怎样工作的细节方面
你可以去看一些
中间步骤
对此我想说的是
当我准备发布我的应用程序时，或者说当我准备让其他人来使用我的应用时
我们将会得到
就会清楚的知道谁看了这个视频
发布应用并不意味着你只需键入 dotnet publish
然后它就会神奇的出现在某个网站上
是的 -对，我希望
我只是我希望大家能理解以下两者之间的不同
通过 C# 所写的源代码，与将被拷贝到最终位置的 Razor 页面
很好，这是一小部分的 C# 代码
是的
那我想知道我是否能够这样做
怎么样
我们在这写了 C# 代码，不是吗
那么，2 + 2 会可行吗
我将会在这里得到什么
出错了
好吧，这将导致一个错误，是吧
所以，这并不像我想象的那样
那在这里添加 C# 代码的规则是什么
我们会稍微探讨一下，正如我们所做的这样，然后把大量的代码放在这里面
太棒了
这是动态的，有一场音乐将马上开始
我们将在稍后回来，再来聊一聊如何配置
