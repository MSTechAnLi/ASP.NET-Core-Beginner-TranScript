嘿，朋友们！
总之，我们制作了一个控制台应用程序
嗯
我们已经探索了文档
我们已经安装了 .NET Core SDK 和 Visual Studio Code
是的
很好，接下来，让我们来制作一个 Web 应用
没错
很好，现在让我们看向我的屏幕，
在我们的文件夹中有我的控制台应用
所以我们必须创建一个全新的文件夹
对的           嗯
我想指出的就是
它所做的只是一个 WriteLine ，并将其输出到控制台，
并不是特别令人印象深刻，这里也没有用到浏览器
这只是， Hello Scott
嗯，我们需要这样，
当你正在学习 Web 框架时，你会想
通过 Web 做一些事      当然，
[CROSSTALK] 就让我们来做吧
我想先比较一下
两者的区别，让我们来看看那个，
好吗？         好的
那么你想让我做什么？
没准我可以教你一个新的技巧？
让我们来试试吧
你可以在同时创建
你的 Web 应用和
一个目录吗？                      你确定吗？
我可以做到
可我喜欢创建目录
我知道，但
（你应当）喜欢尝试新的东西    好的吧
尝试一下
新的，行嘛     我会尝试的
dotnet new -o
-o
是的
让我们把它称为 mywebapp
所以我们在之前的视频中，
我们查看了各类可用的 .N​​ET 模板
Web 只是其中的一个模板
让我们看一下控制台，
现在让我们稍等一下，为了那些可能
当前还在调整的人       好的
敲下 Enter 键
所以它说，
模板 ASP.NET Core Empty ，已创建成功，并放在了
名为 mywebapp 的文件夹中。 我喜欢
先创建目录，然后进入目录，但你
说我可以使用 -o ，它会同时创建文件夹，
和同名项目               是的，在同一时间
但你考虑一下，
如果有人在 Windows 之外使用这种方法，
他们创建目录的方式可能会有所不同
这是很有道理，
你是对的，因为我说用， md ，他们可能会说用， mkdir
是的
说得好
好的，
当我这样做时，就像你说的，我们完成了一个新的 .NET 网站
嗯
这是哪一个，
这是一个空的              尽管，
那还有别的网站选项，我们稍后再探讨
但现在我们完成了
最简单的 Web 应用程序
确切的说，就像这一步，
就在控制台
的上面一行                       嗯
就在它的上方
我们可以进入，
让我们进入 mywebapp （目录），然后
我看到一个 csproj （文件），这是合理的，我还看到 Program.cs ，
这我之前就见过          但是
这些是不同的                     我看到 Startup.cs 和
wwwroot 。 现在，
我们可以在命令行中试一下，但是若能打开
VS Code 就更好              相当不错
完美，这样
让我们进入那（目录）
现在，这就很有趣，顺便说一下，我键入了 "code ." ，
它打开了我的 Web 应用程序（目录）
值得指出的是，如果你注意到背景
在那里，它也打开了我以前的窗口
VS Code 喜欢把事情恢复到原来的样子
它正在恢复我的会话
我要去关闭之前的控制台应用
我们这样说的时候，它再次出现了这种警告，
为构建添加所需的资源，这毫无疑问的选 yes ，因为
我们希望能够调试我们的 Web 应用程序，对吧
我注意到你在右下角有一些额外的东西，
是那些额外的             对，这是一个值得关注的地方
在下方这里，我有一些扩展，
这些像小手风琴一样的扩展
如果我想玩 Docker ，或者如果我要使用 Git ，那么
GitLens 和 Docker 是（所需的）扩展
如果我点击左边这里，你可以看到我的安装扩展，
和推荐的扩展
我可以在这里搜索
扩展，而不是使用网页版
嗯
这里我就把他们移开了哦
好的，因为我刚注意到一些不同的东西，所以
我在为大家提问
不错的提问
所以就让我们把它移开，我们继续吧
Program.cs ，这比以前的稍大一些
因为它多了一堆东西，如果我们对比一下
前一个，
而我们很多时候只使用 systems （指以 System 开头的名称空间），可能还有 IO
说的好，我们来打开 csproj （文件）
嗯       你可以回忆下先前的内容，
而在这我们所用的 SDK 是 Microsoft.NET.Sdk.Web ，
这是一个 Web 应用
这是新的，还有一个文件夹叫做，
wwwroot ，我们稍后再谈
这是我们第一个引用的包， Asp.NetCore ，
特别的是 .All （完整为 Microsoft.AspNetCore.All ）
所以包含了所有的内容？
对
现在，它实际上可以把一个个项目分开，
ASP.NET Core 能分成许多​​不同的部分
这些都可以随意组合
嗯       这是一个许多包
组成的包，而不是使用了几十个不同的
包，我也不得不选用这些我想要的，以及我不想要的，
当然这使得它使用更方便
在默认情况下，它就给了我所有的东西
对于学习来说，这使得入门更加简单
如果您熟悉 ASP.NET ，
这将更容易，因为所有你想用的都已经添加了
我也这么觉得，我还注意到了一件事，
这里有一个版本号
这是很有用的一点，也很简单，你只需说，我想要2.0（版本）
它将决定所有未指定的（版本号）
2.0，好吧
我称之为元包（ metapackage ）或者由程序包组成的包（ package of packages ）
我喜欢这个词， package of packages
嗯，简单明了
让我们打开 Program.cs ，你会看到我们之前用过的 System
是的
在我们键入了 Using System 后，这将允许我们使用
Console.WriteLine 哦不 System.Console.WriteLine 
但这是一个 Web 应用程序，并且
我们还有其他的东西，我们引入了一些有关线程以及
IO 的东西，这些就是 ASP.NET Core 所添加的东西
值得指出的是，
我们在这里的 Main （函数）和我们控制台中的 Main （函数）不同
之前我们有一个 Console.WriteLine ，
就是这样
嗯
其实，这些都是脚本（生成的），
这当然意味着我们确实有一个脚本，对吧？
[LAUGH] 我不知道我能否这样做
好吧，我只是有一个 Main （函数），
我已经把所有与 Web 相关的注释掉了
那么，会发生什么？
让我们来试一试
我想知道它是否能运行
记得我已经按下了键盘， "Ctrl + ~" ？
我认为这是波浪号
我想如果你说， tildi ，
你可能就会有某种口音
我认为这将是一个彻彻底底的口音
且完全不正确
对的
嗯
好吧，
所以它实际上它将形如一个控制台应用程序
对。 其实，它并没有真正地发生改变
因为它总是一个控制台应用程序
对吖 [LAUGH]
这和他们想的是同一件事，对吗？
.NET 应用程序有一个主要入口点，并且
然后它会做一些事情
我只是想说明它可以做一些事情
控制台的东西，或者它可以做一些 Web 的东西
让我们来做一些有关 Web 的东西
就像现成的盒子一样？
是的，这很好
所以让我们回到（命令行）， "dotnet run" ，
这次改变后使用了 BuildWebHost
它会运行并构建（应当是先构建再运行）
它输出了许多信息
（程序）正在生产（环境）中运行
（程序）在 localhost 5000（端口）上监听，所以
我们启动了一个小型的网络服务器
嗯
现在它显示，正在监听 localhost:5000
让我们打开浏览器，让我们转到 localhost:5000
你是不是可以点击终端内的链接？
对，说得好
我想我可以 [LAUGH] 或不可以
不可以，好吧 （其实是可以的，按住 Ctrl 再点击）
我不知道
[LAUGH] 它应该可以
它应该能这样使用
除了 Hello World
这就是 Hello World! ，确实是这样
那么， Hello World 是从哪里来的？
再哪里？
这些文字在哪里？
对，这些文字在哪里
好的，让我们来看看，让我们一起来看看
BuildWebHost 将这些参数传入并执行了 .Run （ Method ）
BuildWebHost 做了些什么？
就在这里
是的
看起来像 CreatesDefaultBuilder ，
然后它调用了， UseStartup （ Method ）
然后        然后
你可以在这里看到这里的 Startup 文本是蓝色的，
这意味着它不是一个……，它像是一个关键词 （并不是关键词）
在这里，这个词 Startup 告诉它使用这个类
这个类的名称并没有什么特别的，
如果我将它改为Foo，         它不会……
好吧，让我们来找出答案
让我们将其更改为 Foo 并继续，
键入 dotnet run ，看看会发生什么
类型或名称空间 Startup 无法找到，这样的吗？
那如果我将这个改为 Foo 呢？
我们来试下
没有输出错误，运行得很好
这里要说的一点是， Startup 这个名字并没有什么特别的
这不是魔术          对
它不一定非要是 Startup
不，它的意思是，如果我们再看看文档，
这对于 Visual Studio Code 来说很方便，
它表示指定要由 Web 主机使用的启动类型
所以它只是说去使用这个类
像这里我们称之为 Startup 或 Foo 的这个类，或者
任意名称，但都必须以正确的形式填入，
它必须看起来是种正确的形式（这里应该是指没有错误提示）
好的，你可以称它为 Beyonce ，
你可以给它任意的名称
好，它必须是 Beyonce
[LAUGH] 恐怕我应该有（某个带口音的词），
但我们只是用了 Beyonce ，没有带口音
它应该运行得很好
Beyonce 应该是一个关键词 （真的不是关键词）
应该是
保留字
它一定是的                      可惜的是，它并不是
这是非常重要的一点
这说使用这种启动类型
并且该启动类型必须具有某些方法
所以 Beyonce ，在这种情况下，必须有一种方法
称为 ConfigureServices ，另一个称为 Configure
好的
这就是 Beyonce 在这一上下文中的要求
作为启动类型
那么这些是怎么回事？
我们已经有     而且你再顶端有一些友好的
提示，这是我一直很赞赏的
是的，当模板包含一些提示，或一些注释时，
我将非常喜欢它
所以这个方法是再运行时调用的
它将服务添加到名为 ServiceCollection 的集合中
而服务是指你稍后想要在程序中使用的
任意东西
这些可能是认证，
使用像 Facebook 或 Google 这样的服务，我们日后将会这样做
但                           所以，如果我只是输入 "services." ，
你就能看到 AddAuthentication ， AddCaching ，
AddIdentity ， AddLogin ， AddMemory ，以及添加任何内容
甚至一些你说不出的东西
就像 Facebook 认证一样，
和这些不同的其他第三方的服务
也可以添加
所以这些服务在这里配置，
被添加到这个集合
是的     这有点令人困惑
因为你有 ConfigureServices （ Method ）
然后你有 Configure （ Method ）
就像我第一次接触时一样，让我一开始感到非常困惑
是的，这是会让人感到困惑
这是把一切都准备就绪，
加载我想要使用的东西的集合
对
然后配置它们
设置它们
可能，你可以像这样命名它， AddServices
或者 DoTheStuffWithTheServices
[LAUGH] 好的
[LAUGH] 然后配置它们
是的，好吧
但重点在于准备好你的环境，并且
然后做特定的事情来设置你的环境
就像在这种情况下，如果我们正在进行开发，
而不是生产，
那么当你得到一个异常时，你会喜欢上这个友好的页面
嗯哼，而不是满页的恐惧
是的，不是可怕的页面
这里是 app.Run （ Method ），
这里是默认的，因为你说了我们想要一个空的（模板）
你问了 Hello World! 是来自哪里的
它就在那里
对，它就在那
所以我们已经改变了这个文本，并且运行 dotnet run
它应该仍然可以运行
现在，如果我回到这里，并且
注意它仍然输出了 Hello World!
是的
这是因为我们没有刷新
看，出现了
是的，这很棒
你喜欢这个吗？
是的
很好          我认为 Beyhive 将会很开心
他们会
总之，很酷
这很酷            Mm-hm
事情正是如此，当你完成到这里，
我们已经看见了 hello world 或者是 hello beehive 以纪念 Beyonce
但是，作为一个第一次建立网页的人
，你想看到一个页面
就像，你实际上想看到一些别的
而不仅仅是 -        字符串
仅仅是字符串
对，当然，若想看到字符串，
若你想在 Response.Write 中完成你所有的工作
你很快就会崩溃的
是的     对
所以在下一节中，我们将添加一些页面
并建立，采取这一点，但我们将从 empty （模板）开始
是的     我们不会作弊，
我们要建立在 empty （模板）之上
所以我们写了一个控制台应用程序，
我们已经写了一个应用程序可以返回单个字符串，
下一节我们将会制做页面
是的