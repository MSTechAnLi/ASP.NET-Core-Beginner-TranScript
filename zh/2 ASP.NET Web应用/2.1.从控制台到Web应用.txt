嘿，朋友们！
总之，我们制作了一个控制台应用程序。
>> 嗯。
>> 我们已经探索了文档。
我们已经安装了.NET Core SDK和Visual Studio Code。
>> 是的。
>> 好的，接下来，让我们来制作一个Web应用。
>> 没错。
>> 好的，让我们在这里看向我的屏幕，
我们有我的控制台应用的文件夹。
>> 所以我们必须创建一个全新的文件夹。
>> 对的。 >> 嗯。
>> 我只想指出
它所做的只是一个WriteLine，并将其输出到控制台，
不是特别令人印象深刻，这里也没有用到浏览器。
这只是，Hello Scott。
>> 嗯，我们需要，
当你正在学习Web框架时，你想
通过Web做一些事 >> 当然，
[CROSSTALK] >> 所以让我们来做吧。
>> 我只是想要对比
两者的区别，让我们来看看那个，
好吗？ >> 好的。
>> 那么你想让我做什么？
>> 所以我可以教你
一个新的技巧？ >> 让我们来试试吧。
>> 你可以在同时创建
你的web应用和
一个目录吗？ >> 你确定吗？
>> 我可以做到。
>> 因为我喜欢创建目录。
>> 我知道，但
（你应当）喜欢尝试新的东西。 >> 好的吧。
>> 尝试一下
新的，行嘛。 >> 我会尝试的。
>> dotnet new -o。
>> -o。
>> 是的。
让我们把它称为mywebapp。
所以我们在之前的视频中
我们查看了可用的各类.N​​ET模板。
Web只是其中的一个
模板。让我们看一下控制台，
现在我们正在看着web，为了那些可能
现在还在调整的人。 >> 好的。
>> 敲下Enter键。
>> 所以它说，
模板ASP.NET Core Empty，已成功创建，并放在了
名为mywebapp的文件夹中。我喜欢
先创建目录，然后进入目录，但你
说我可以使用-o，它会同时创建文件夹，
和同名项目 >> 是的，在同一时间。
但你考虑一下，
如果有人在Windows之外使用这种方法，
他们创建目录的方式可能会有所不同。
>> 这是一个有效的观点，（误）
你是对的，因为我说，md，他们可能会说，mkdir
>> 是的。
>> 说得好。
>> 好的，
当我这样做时，就像你说的，我们完成了一个新的.NET网站。
>> 嗯。
>> 这是哪一个，
这是一个空的。尽管，
那有不同的网页选项，我们稍后会探讨。
但现在我们做了
最简单的Web应用程序。
>> 确切的说，就像这一步，
就在控制台
的上面一行。 >> 好的。
>> 就在它的上方。
>> 我们可以进入，
让我们进入mywebapp，然后
我看到一个csproj，这是合理的，我看到一个Program.cs，
这我之前就见过。 >> 但是
这些是不同的。 >> 我看到一个Startup.cs和
一个wwwroot。现在，
我们可以在命令行中试一下，但是若能看到
VS Code就更好。 >> 很好。
>> 完美，这样
让我们进入那（目录）。
现在，这就很有趣，顺便说一下，我键入了code . ，
它打开了我的Web应用程序。
值得指出的是，如果你注意到背景
在那里，它也打开了我以前的窗户。
VS Code喜欢把事情恢复到原来的样子
它正在恢复我的会话。
我要去关闭之前的控制台应用。
我们就这样说，它会再次出现这种警告，
为构建添加所需的资源，这毫无疑问的选yes，因为
我们希望能够调试我们的Web应用程序，对吧。
>> 我注意到你在右下角有一些额外的东西，
是那些额外的 >> 对，这是一个值得关注的地方。
在这里，我有一些扩展，
这些像小手风琴一样的扩展。
如果我想玩Docker，或者如果我要使用Git，那么
GitLens和Docker是（所需的）扩展。
如果我点击左边这里，你可以看到我的安装扩展，
和推荐的扩展。
我可以在这里搜索
扩展，而不是使用Web。
>> 嗯。
>> 这里我只是把他们移开了。
>> 好的，因为我刚注意到一些不同的东西，所以
我在为大家提问。
>> 不错的提问。
所以就让我们把它移开，我们继续吧。
Program.cs，这比以前的稍大一些。
>> 因为它多了一堆东西，如果我们对比一下
前一个，
---以下部分只为机翻，还未确认---
而我们把很多只使用系统和IO。
>>其实，这是一个很好的观点，我们来打开csproj。
>>是的。 >>如果您早点回忆，
我们的SDK是Microsoft.NET.Sdk.Web，
这是一个Web应用程序。
这是新的，表明有一个文件夹叫做，
wwwroot，我们稍后再谈。
我们有我们的第一个软件包参考，Asp.NetCore，
特别是。
>>所以文学的一切？
>>对。
现在，它实际上可以一次列出一个项目，
ASP.NET分成许多​​不同的部分。
所以这是一个自助餐厅的计划。
>>好的。 >>这是一个包
包，而不是有几十个不同的列表
包，并不得不挑选我想要的，我不想要的，
这使得它非常简单得多。
它只是给了我默认的一切。
所以对于学习来说，入门更容易，更容易。
如果您熟悉ASP.NET，
这很容易，因为你期望的一切都在那里。
>>我也是，我也注意到了一件事，
现在是一个版本。
>>这很好，很简单，你只是说，我想要2.0和
它带来的一切都悬而未决。
>> 2.0，好吧。
>>我称之为元包或一揽子软件包。
>>我喜欢这个词，包裹包。
>>是的，很好很简单。
所以如果我们进入Program.cs，你在使用System之前就看到了
>>是的。
>>当我们说使用系统时，这是我们输入的内容
Console.writeline cuz system.console.writeline。
但是这里是一个Web应用程序，并且
我们还有其他的东西，我们引入了一些线程和
一些IO的东西，但这是添加的Asp.net的东西。
值得指出的是，
我们的主要区别在于我们的主控台。
在我们有一个console.writeline之前，
就是这样。
>>是的。
>>其实，这完全是脚本，
这当然意味着我们确实有一个脚本，对吧？
>> [笑声] >>我不知道我能否做到这一点。
好吧，我只是有一个主要的，
我已经评论了所有的网络资料。
>>那么，会发生什么？
>>让我们来找出答案。
我想知道它是否会起作用。
记得我已经打字，控制〜？
>>我认为这是蒂尔达。
我想如果你说，tildi，
你可能有某种口音，是的。
>>我认为这将是一个彻底和彻底的口音
完全不正确。
>>是的。
>>是的。
>>好的，
所以它实际上将它切换到控制台应用程序。
>>对。那么，它并没有真正改变它
因为它总是一个控制台应用程序。
>>是[LAUGH]。
>>这个想法是他们是同一件事，对吗？
.NET应用程序有一个主要入口点，并且
那么它会做一些事情。
我只是想说明它可以做一些事情
consoley的东西，或者它可以做一些webby的东西。
>>所以，让我们来做一些webby的东西。
就像现成的盒子一样？
>>是的，这很好。
所以让我们回去，dotnet运行，
这一次改变它说BuildWebHost。
它会运行并建立。
它说了几件事。
它正在生产中运行。
它在localhost 5000上监听，所以
我们开始了一个小型的网络服务器。
>>好的。
>>现在它说，在本地主机听：5000。
让我们打开浏览器，让我们localhost：5000它。
>>你也不能只是点击终端内的链接？
>>是的，这是一个很好的观点。
我想我可以[笑]或不。
>>或不，好吧。
>>我不知道，是的。
>> [笑声]应该。
>>它应该工作。
>>除了Hello World！
>>这就是Hello World！，完全是。
>>那么，Hello World来自哪里？
哪里？
>>文字在哪里？
>>有文本本身，所以。
>>是的，让我们来看看，让我们一起来看看。
所以BuildWebHost将这些参数传入并说.Run。
BuildWebHost做什么？
就在这里。
>>是的。
>>看起来像CreatesDefaultBuilder，和
然后它说，UseStartup。
然后 - >>然后
你可以在这里看到这里的启动文本是蓝色的，
这意味着它不是一个，它基本上是一个关键字。
在这里，这个词Startup告诉它使用这个类。
这个班的名字并不神奇，
如果我将它改为Foo，>>它不会 - 
>>好吧，让我们来找出答案。
让我们继续并将其更改为Foo，
打dotnet运行，看看会发生什么。
类型或名称启动无法找到，好吗？
但是如果我将这个改为Foo呢？
>>我们走了。
>>暂停，运行得很好。
有一点是，Startup这个名字并不神奇。
>>这不是魔术。 >>对。
>>它不一定非要启动。
>>不，它的意思是，如果我们再看看文档，
这对于Visual Studio代码来说很不错，
它表示指定要由Web主机使用的启动类型。
所以它只是说去和使用这个类。
这里我们称之为Startup或Foo的这个类，或者
无论如何，都必须以某种方式形成，
它必须以某种方式看待。
>>好的，你可以称它为碧昂丝，
你可以称它为任何东西。
>>是的，它必须是碧昂丝。
>> [笑]恐怕我应该有[FOREIGN]，
但我们只是没有口音而拥有碧昂丝。
它应该工作得很好。
碧昂斯应该是一个关键词。
>>应该是。
>>保留字。
>>应该是，应该是。 >>但它并不可悲，
>>所以这是一个重要的观点。
这是说使用这种启动类型。
并且该启动类型必须具有某些方法。
所以碧昂丝在这种情况下必须有一种方法
称为ConfigureServices，另一个称为Configure。
>>好的。
>>这就是Beyonce在这方面的要求
启动班。
那么这些是怎么回事？
我们已经得到了 - >>而且你很好
顶端的小指令，我一直赞赏。
>>是的，当模板包含一点​​点时，我喜欢它
的指导，一点评论。
所以这个方法是由运行时调用的
它将服务添加到名为ServiceCollection的集合中。
而服务只是你可能想要使用的东西
稍后在你的应用程序。
>>所以这可能是认证，
所以使用像Facebook或Google这样的服务，就像我们会这样做
看看以后的日期，但 - >>所以，如果我只是输入服务。，
你有AddAuthentication，AddCaching，
AddIdentity，AddLogin，AddMemory，添加任何内容。
甚至不像你指出的那样。
就像Facebook认证一样，
不同类型的这些都是其他第三方的东西
也可以添加。
所以这些服务在这里配置，
被添加到这个集合。
>>是的。 >>这有点令人困惑
因为你有配置服务。
>>然后你有配置。
就像我第一次那样让我困惑
开始。
>>是的，这很混乱。
这是一切准备就绪，
加载我想玩的东西的集合。
>>是的。
>>然后配置它们。
设置它们。
就像你可能有可能，也许他们可能已经命名它添加
服务或DoTheStuffWithTheServices。
>> [笑声]好的。
>> [LAUGH]然后配置它们。
>>是的，好吧。
>>但重点在于准备好你的环境，并且
然后做特定的事情来设置你的环境。
就像在这种情况下，如果我们正在开发，
不生产，
那么当你得到一个异常时，你会喜欢一个友好的页面。
>>好吧，不是一页恐怖片。
>>是的，不是可怕的页面。
这里是应用程序。运行，
这是你说我们想做空的默认因素。
你问了Hello World！是哪里的。
>>它就在那里。
>>它是。
所以我们已经改变了这个文本，并且运行了dotnet。
它应该仍然运行。
现在，如果我回到这里，并且
注意它仍然说Hello World！
>>是的。
>>这是因为我们没有刷新。
就在那里。
>>是的，这是一个很好的。
>>你喜欢那样吗？
>>是的。
>>很好。 >>我认为Beyhive
会很高兴。
>>他们会。
好，很酷。
>>这很酷。 >> Mm-hm。
>>当你工作时，其中一件事情如此
为了纪念碧昂斯，我们已经看到了你好世界或你好蜂巢。
但是，作为一个正在构建他们的网页的人
第一次，你想看到一个页面。
就像，你实际上想看到一点点
不仅仅是 - >>一个字符串。
>>只是一个字符串。
>>对，当然，有一个字符串，
就像在Response.Write里面做你所有的工作一样
会很快分解。
>>是的。 >>对。
所以在下一节中，我们将添加一些页面
并建立，采取这一点，但我们将从空虚开始。
>>是的。 >>我们不会作弊，
我们要建立在空洞之上。
所以我们见过一个控制台应用程序，
我们已经看到一个应用程序可以执行单个字符串，
下一节我们会做页面。
>>是的，我们会。