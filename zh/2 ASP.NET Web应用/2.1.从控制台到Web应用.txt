嘿，朋友们
现在我们已经制作了一个控制台应用
我们也浏览了文档，并且安装了 .NET Core SDK 和 Visual Studio Code
好了，那接下来，我们要制作一个 Web 应用
没错
现在看向我的屏幕，在文件夹中已经有我们的控制台应用了
所以我们必须创建一个全新的文件夹
嗯，是这样
我们要做一个什么样的程序呢？最起码应该做到通过 WriteLine ，并把内容输出到控制台
但其实这也没啥特殊的，也没有用到浏览器
只是做了一个 Hello Scott
嗯，如果你正在学习 Web 框架的话，你肯定会想通过 Web 做一些有趣的事嘛 -当然喽
我们一定要搞一个大新闻
我想先比较一下这两个程序有啥区别，让我们来看看那个吧 -好的
我们应该怎么开始，你有好的建议吗
没准我可以教你一个新的技巧
可以，来吧
你可以在同时创建你的 Web 应用和目录吗 -你确定吗
可以是可以，但我喜欢直接创建目录
我知道，但尝试一下新的东西总是好的吧 -好吧，我会的
dotnet new web -o
起个名字叫 mywebapp 吧
其实在之前的视频中我们就查看了各类可用的 .N​​ET 模板
Web 只是其中的一个模板，我们已经了解了 console ，现在我们需要看下 web
稍等一下，我觉得有必要等一下屏幕前的小伙伴。 -好的
敲下回车
欸，你看模板 ASP.NET Core Empty ，已创建成功，并放在了名为 mywebapp 的文件夹中
你喜欢先创建目录，然后进入目录
但是使用 -o 命令，它会同时创建文件夹和同名项目，这两任务同时给你整好了
而且你想想
如果有人在 Windows 之外使用这种方法，他们创建目录的方式可能会有所不同
说的好，确实是这样，因为我用 md 他们可能会用 mkdir
提醒一下小伙伴们
好的，还有当我这样做时，就像你说的，我们完成了一个新的 .NET 网站
这个应用并没有包含具体内容。当然还有别的可创建网站的选项，那些我们等会说
但现在我们完成了最简单的 Web 应用
确切的说，创建的时候只用了一行命令就给解决了
让我们来看看这个程序，先进入 mywebapp （目录）
然后我看到了 csproj ，这是必须有的哈，我还看到了 Program.cs
之前我们就见过这些文件了 -但是这些和之前有所不同 -我看到 Startup.cs 和 wwwroot
现在我们可以在命令行中试一下，但是若能打开
VS Code 就更好了
这很好
完美，让我们在这打开
这就好玩了，顺便说一下，我键入的是 code .
它打开了我的 Web 应用程序目录
你看到了没，如果你注意到背景
在那里，它也打开了我以前的窗口
VS Code 能够记录你的工作状态并且恢复上次的会话
但是我们要先关闭之前的控制台应用
欸，它又出现了这种警告
为构建添加所需的资源，这毫无疑问的选 yes
因为我们总希望能够调试我们的 Web 应用，对吧
我注意到你在右下角有一些额外的东西
是那些确实是一个值得关注的地方
在下方这里，我有一些扩展，这些像小手风琴一样的扩展
如果我想玩 Docker ，或者如果我要使用 Git ，那么 GitLens 和 Docker 就是所需的扩展
如果我点击左边这里，你可以看到我的安装扩展和推荐的扩展
我可以在这里搜索扩展，而不必使用网页版
这里我就把他们移开了
好的，因为我刚注意到一些不同的东西
所以我想帮屏幕前的童鞋问一下
不错的提问
我们先不理它了，继续吧
Program.cs ，这比以前的稍大一些
因为它多了一堆东西，如果我们对比一下前一个程序
而我们很多时候只使用 systems （指以 System 开头的名称空间），可能还有 IO
说的好，我们来打开 csproj 文件
嗯 -你可以回忆下先前的内容
而在这我们所用的 SDK 是 Microsoft.NET.Sdk.Web ，这是一个 Web 应用
这是新的，还有一个文件夹叫做 wwwroot ，我们稍后再谈它
这是我们第一个引用的包， Asp.NetCore
注意到是 .All 了吗
它能包含所有的内容
没错，现在，它可以把一个个的项目分开
ASP.NET Core 能分成许多​​不同的部分
这些都可以随意组合
嗯 -这是一个由许多小包组成的大包，有些框架包含了几十个包
不管我用不用得到，都给集成上了
当然这也是为了免去麻烦的配置，使得它使用更方便，在默认情况下，它给了我所有的东西
对于学习来说，这能使得入门更加简单
如果您熟悉 ASP.NET 这就更容易了，因为所有你想用的都已经添加上了
我也这么觉得，我还注意到了一件事，这里有一个版本号
这点很好呀，也很简单，你只需说，我想要2.0版本
它将决定所有未指定的版本号
2.0，好吧
我称之为元包或者由程序包组成的包
我喜欢这个词， package of packages
嗯，简单明了
让我们打开 Program.cs ，你会看到我们之前用过的 System
在我们键入了 Using System 后，这将允许我们使用 Console.WriteLine 哦不 System.Console.WriteLine
但这是一个 Web 应用，并且还加入了其他的东西，我们引入了一些有关线程以及
IO 相关的东西，这些就是 ASP.NET Core 所添加的东西
值得指出的是
我们在这里的 Main 和我们控制台中的 Main 不同
之前我们有一个 Console.WriteLine
就是这样
其实，这些都是脚本生成的
这当然意味着我们确实有一个脚本，对吧
不知道我能不能这么做
我就只需要一个 Main
我已经把所有与 Web 相关的注释掉了
那么，会发生什么
让我们来试一试，我想知道它是否能运行
记得我已经按下了键盘， Ctrl + ~
我认为这是波浪号，如果你说， tildi
你可能就会有某种口音
我认为这将是一个彻彻底底的口音
且完全不正确
所以它实际上就像是一个控制台应用
对的。 其实，它并没有真正地发生改变
因为它终究是一个控制台应用
可以把他们当作一样的东西，是吧
.NET 应用程序有一个主入口点
然后它能完成一些工作
我只是想说明它可以作为控制台应用
也可以作为 Web 应用
来做一些有关 Web 的程序吧
就像是开箱即用
是的，这很好
所以让我们回到命令行， dotnet run
这次改变后使用了 BuildWebHost
它会编译再运行起来
输出了许多信息呢
程序正在生产环境中运行
正在监听 localhost:5000
我们启动了一个小型的网络服务器
嗯
现在它显示，正在监听 localhost:5000
让我们打开浏览器，让我们转到 localhost:5000
你是不是可以点击终端内的链接
对，说得好
欸?不能嘛
不可以，好吧 （注：其实是可以的，按住 Ctrl 再点击）
我不知道哎
它应该可以的
它应该能这样使用
除了那个 Hello World
这就是 Hello World! ，确实是这样
那么， Hello World 是从哪里来的
等一下
这些文字从哪里来的
对，这些文字在哪里
好的，让我们一起来看看吧
BuildWebHost 将这些参数传入并执行了 .Run
BuildWebHost 做了些什么
看到这儿
是的
看起来像 CreatesDefaultBuilder ，然后它调用了 UseStartup
然后呢
你可以在这里看到这里的 Startup 文本是蓝色的
这意味着它有些不同，它像是一个关键词
在这里，这个词 Startup 告诉它使用这个类
这个类的名称并没有什么特别的
如果我将它改为 Foo ， 它会不会
好吧，让我们来找出答案
让我们将其更改为 Foo 并继续键入 dotnet run ，看看会发生什么
类型或名称空间 Startup 无法找到，这样的吗
那如果我将这个改为 Foo 呢
让我们来试下
它停了一下，运行成功了
这里要说的一点是， Startup 这个名字并没有什么特别的
这并不是魔术
它不一定非要是 Startup
它的意思是，然我们再看看文档吧
这对于 Visual Studio Code 来说很方便
它表示指定要由 Web 主机使用的启动类型
所以它只是说去使用这个类
像这里我们称之为 Startup 或 Foo 的这个类，或者
任意名称，但都必须以正确的形式填入
它必须是正确的形式
好的，你可以称它为 Beyonce
你可以给它任意的名称
好，它必须是 Beyonce
也许我们有别的选择吧
但我们只是用了 Beyonce
它应该运行得很好
Beyonce 应该是一个关键词
应该是
保留字
-它一定是的。-可惜的是，它并不是
这是非常重要的一点
这说使用这种启动类型
并且该启动类型必须具有某些方法
所以 Beyonce ，在这种情况下，必须有一种方法
称为 ConfigureServices ，另一个称为 Configure
这就是 Beyonce 在这一上下文中的要求
作为启动类型
那么这些是怎么回事
在上方我们会有一些提示，这是很赞的功能
是的，当模板包含一些提示或一些注释时会让开发人员很省劲
所以这个方法是在运行时调用的
它将服务添加到名为 services 的集合中
而服务是指你稍后想在程序中使用的任意内容
可以是认证之类的
在使用像 Facebook 或 Google 服务的时候，我们可能会用到
如果我只是输入 services.
你就能看到 AddAuthentication ， AddCaching
AddIdentity ， AddLogin ， AddMemory 以及添加任何内容
甚至一些说不上来的东西，就像 Facebook 认证一样
和这些不同的其他第三方的服务都可以添加上来
所以这些服务在这里配置并被添加到这个集合中
是的，这有点令人疑惑
-因为你即有 ConfigureServices -还有 Configure
就像我初学时一样，这让我非常困惑
是的，这是会让人感到困惑
这是为了做好一切准备
加载我想要使用的程序的集合
然后配置它们，设置好
你可以像这样命名它： AddServices 或者 DoTheStuffWithTheServices
然后配置它们
嗯呢
但重点在于准备好你的环境，并且然后做特定的事情来设置你的环境
就像在这种情况下，如果我们正在进行开发而不是生产
那么当你得到一个异常时，你会喜欢上这个友好的页面
嗯嗯，而不是满页的恐惧
是的，不是可怕的页面
这里是 app.Run 这里是默认的，因为你说了我们想要一个空的模板
你问了 Hello World! 是来自哪里的
它就在那里
哦，那就是啊
所以我们已经改变了这个文本，并且运行 dotnet run
它应该仍然可以运行
现在，如果我回到这里，注意它仍然输出了 Hello World!
这是因为我们没有刷新
看，出现了
是的，这很棒
你喜欢这个吗
太棒了，我认为 Beyhive 将会很开心
肯定会呀
总之，很酷
确实很酷
事情正是如此，当你完成到这里
我们已经看见了 Hello world 或者是 Hello Beyhive 以纪念 Beyonce
但对第一次建立网页的人来说
你想看到一个页面
就像，你实际上想看到一些别的
而不仅仅是字符串
仅仅是字符串
对，当然，若想看到字符串
若你想在 Response.Write 中完成你所有的工作
你很快就会崩溃的
是这样的
所以在下一节中，我们将添加一些页面
以及如何构建和运行，我们将从零开始
是的，我们不会作弊
我们要建立在零基础之上
所以我们写了一个控制台应用
我们已经写了一个应用可以返回单个字符串
下一节我们将会制做页面
是的，我们会的！敬请期待
