嗨，欢迎回来。
我们将在这个模型中看看Razor Pages。
在我们向您介绍页面概念之前，我们先看了一下它。
现在我们将在Visual Studio Code和命令行之外查看它，我们将开始使用Visual Studio。
是的，所以我们甚至在Visual Studio Code中做了我们的工作，你可以看到这里，我们蠢蠢欲动，我们做了几页。
你记得我们从一个空模板开始。
是啊。
所以我们从无到有，我们从一个Hello World控制台应用程序转到了一些带页面的东西。
我将关闭Visual Studio Code，我将在这里找到适合Visual Studio for Visual Studio的Visual Studio。
>>是的>>如果您使用的是Mac，可能会使用Visual Studio for Mac。
在这个特殊情况下，我将使用Visual Studio 2017社区，您可以在VisualStudio.com上获取此信息
免费。
免费，它工作得很好，很棒，Visual Studio社区有一些基于公司规模的小限制。
但是，如果您作为开源人员或正在学习的人这样做，Visual Studio社区实际上是专业人士。
好的。
它实际上是专业版，让你有扩展，这是一个很棒的小工具。
好吧，所以我想做的是，你可以看到只是为了熟悉这里的用户界面我已经得到了一些新的东西，我有新项目。
您可以说，在左侧创建新项目，您可能会看到不同的东西，具体取决于您安装的内容。
当我运行Visual Studio的安装程序时，我为工作负载设置了Web，称为Workload。
您可能没有Android，但是您希望确保拥有.Net核心Web工作负载。
快速提问，您提到Visual Studio安装程序，下载Visual Studio时会出现这种情况吗？
是的，好的一点，让我把它拿出来，当你安装它时你会得到这个应用程序，这是Visual Studio安装程序即将到来的这一刻。
安装程序是模块化的，所以它会像这样出现。
如果我说修改，您可以多次运行安装程序，如果您想添加其他内容，则可以在安装Visual Studio后运行安装程序。
看看，即使安装程序本身想要更新，所以现在只是巧合，安装程序有它想要给我的新东西。
所以它会自动更新，而它正在这样做，你下载这个叫做bootstrapper的东西。
这是一个小小的安装程序，可以获取您想要的东西。
如果您安装了所有内容，Visual Studio可能会非常大，或者如果您只想安装Web应用程序，或者您只想安装Windows应用程序，它可以在20分钟内安装。
因此，这允许您自定义安装。
确切地说，您自定义它们的东西称为工作负载，如云工作负载或移动设备工作负载。
你去，它只是自我更新，你可以看到我在录制时，Visual Studio Community 15.4。
你应该确保你至少有或更高。
如果我点击修改它会给我一些更多的选择。
我选择通用Windows后，我当然正在这样做，我选择了.NET桌面，我选择了ASP.Net
但是你可以看到很多其他的选择，你有Python，Node，Data Science。
之后我可以添加这些东西，所以如果我想进行Linux开发C ++，我会点击它，它会更新并告诉我。
现在，它正在考虑为了获得这些东西需要下载多少。
然后从内部你可以进入单个组件并选择你想要的特定事物，所以你看，我也选择了#F。
这可以运行多次，我只想指出我运行它并安装了Web工作负载。
所以在安装Web工作负载的时候，File> New Project就是这里的选择，就是说网页。
所以Visual C＃，Web页面，我已经使用.NET Framework获得ASP.NET Web应用程序，.NET Framework是Windows附带的完整框架。
或者是ASP.NET Core Web Apps，它们当然适用于Linux，Mac和Windows，这就是我们今天所做的。
>>好的。 >>好东西，
我要双击它，我说文件>新项目，它会在这里弹出对话。
你想要仔细检查这个下拉列表，你可能有默认的核心1.0或1.1，你会想要2.0或更高。
您会注意到图标会根据您选择的内容而改变，我可以制作Angular应用程序，React js应用程序，我可以制作完整的模型视图控制器应用程序。
我们只会说Web App，这是默认设置，这给我们提供了今天我们正在做的Razor页面。
当然，Razor Pages是模型视图控制器的一部分或构建在它之上，所以它真的是每个人的最佳选择，即最新的项目模板。
如果您是从命令行执行此操作，那么您还记得该命令的用途吗？
>>剃刀。 >> .Net新剃刀，确切地说。
好的，所以我会双击它。
当我们创建它时，我们将在这里看到解决方案资源管理器的右侧。
这将为您提供与您所说的相同的输出，.NET新剃刀，这对.NET新Web或.NET新MVC很重要。
这是相同的经历。
这是相同的体验，您不希望Visual Studio代码人拥有与Visual Studio专业人员不同的体验。
但是，在你不得不在一个地方使用一些自制之前，模板确实与cuz匹配。
是的，所有模板都匹配，它很好，干净。
这是一个显示在那里的小帮助页面，但我们将在这里放大，看看Visual Studio for Windows如何表达自己。
你可以看到我们有比以前更多的页面，我们有一个关于和一个联系页面。
考虑到我们对Razor垫的了解，这些垫片在哪里？
/ about，/ context，/ error，/ Index将是默认值。
索引将是默认的，完全正确的，现在有趣的是，这些索引在它们下面。
是啊。
Sothese是代码背后或页面模型，这是页面，这是页面模型，他们嵌套了这些。
这是一个重要的小事要指出，让我们在Windows资源管理器中查看这个，以确保，如果我说在Windows资源管理器中打开。
它应该显示为两个单独的文件？
它们是两个独立的文件。
所以这里是Index和Index.cshtml，它们显然是两个独立的文件。
但它很方便，它让您了解Visual Studio中的解决方案资源管理器将嵌套它们的文件之间的关系。
所以你能想到汽车和发动机吗？
是的，你可以这样做，任何层次结构，然后在.CS之下，它变得更有趣，它变成了一个类探险家。
好的。
这些不是文件，当然这是一个属性，这是一种方法。
但是现在我们正在模糊线条，现在你真的在看事情的概念，当你做出改变时会更新。
因此，您在Visual Studio中看不到Visual Studio Code中没有看到的内容，我可以使用所有C＃类来实现。
所以请记住在启动和配置服务之前以及所有这些。
是啊。
同样的交易，也像我们之前在上一个模块中用于配置的app设置json。
如果有一些环境，比如appsettings.production.json或appsettings.json，那就是我们还没有谈到的东西。
没有。
记得之前，当我这样做时，我评论说出来，以便我可以看到 - 
异常页面，是的。
例外，那是什么，你记得那是什么？
是的，我相信这是在你的创业公司。
>>它就在那里。 >>是的
所以这里是UseDeveloperExceptionPage，如果你还记得，那就是你正在开发那样做。
每次我们运行的东西，它一直说我们正在生产。
是。
我变得沮丧。
>> [笑] >>我就这样走了，这让我解决了这个问题，但是不正确。
好的。
我们右键单击，属性，它是构建还是调试？
>>转到 - >>调试。
>>我们去，然后你添加它。
>>是的，所以环境变量ASPNETCORE_ENVIRONMENT等于开发是有所作为的。
因此，将其与配置相关联，您可以拥有不同的配置选项。
你可以有appsettings。
随你。
无论如何，无论如何，就像foo一样。
任何东西。
测试，分期。
好的。
对，无论什么让你开心。
所以在这种情况下，一个应用程序设置，JSON，其中有一些东西。
看起来它有，哎呀，错误的按钮。
我们将在稍后了解一些日志记录。
然后发展。
看看两者之间的区别。
一个设置为警告，一个设置为调试。
哇，好的。
对，那里有一点信息。
比我们最初建立的更复杂。
让我们回到创业公司，看看还有什么不同。
所以我们得到了之前做过的配置。
我们有服务.add mvc。
这里有一个例外，这是一个有趣的一点代码。
因此，如果我们正在开发中，请显示我喜欢的开发人员的异常页面。
或者如果你正在制作或者除了开发之外什么都没有，我们只是要显示错误。
这样我们就不会泄露我们的源代码并向人们显示内容。
现在你让我以前使用过USeMVC。
是。
这个有不同路线的信息。
我们将再谈一次。
然后我们还有静态文件，以防你想要选择一个文件。
请记住，有几次我们试图拿起一个文件，它正在跳过它，因为我们没有把它放在页面上？
是。
如果它在磁盘上找到它，它会提供该文件，如果我们说过StaticFiles的话。
那么，如果我们将这行代码添加到上一个实验中，那么它是否会起作用？
它不会奏效。
它会选择该文件并将其提供给我们。
但它会把它当作一个静态文件。
这不符合预期，好吧。
而不是作为剃刀页面实际执行代码。
所以这些事情的顺序很重要。
而且你是否想要运行它或者将其作为静态文件（如gif或html页面）来取出，好吗？
所以这是一次旅行。
我错过了什么吗？
我觉得这听起来不错。
那很好。
其实还有一点。
在wwwroot下面，这就是静态的东西。
我们有我们的图像和我们的CSS。
页面，静态的东西都是root用户服务的。
然后我们的剃刀页面应用程序的页面，它位于页面中。
但是，当我想要一个像斜线图像的图像，削减一些东西时，它是由wwwroot提供的。
因此，有一件事是新的，即视图导入，布局。
好点子。
所以，记得我们早些时候闲逛时，在这里我们有@page而且我们有@inject，这还不够，然后我们需要一个@using？
然后突然我们有更多的指令，而不是我们有代码？
是啊。
那有点奇怪。
好吧，你可以做一个名为Viewimports的东西，这就是你希望每个页面都有的东西。
是的，所以我们希望每个页面都使用这个命名空间。
而且每隔一个，这是使用名称空间，这是这些页面本身的名称空间。
还有一个叫做标签帮助器的东西，我们今天将在中间件中讨论。
是的，我们会。
然后ViewStart是一段代码，多行。
>> [笑声] >>尽可能多地为每个视图运行。
好的。
好吧。因此，如果每个视图都需要检查某人的姓名，或检查cookie或其他什么。
这取决于你想做什么。
但这些是进口，所有不同的注入，所有不同的使用。
这是你想要的一点代码。
在这种情况下，它正在设置布局。
这就像主页一样，每隔一页都包含在内。
所以在这里，Layout.cshtml是一个剃刀页面，它具有顶级HTML，它有头，它有CSS。
可能在某个地方有一个页脚。
是的，页脚在这里。
有一些Bootstrap和一些不同的JavaScript。
然后你的剃刀页面被称为身体。
它就在那里呈现。
它就在那里呈现。
所以这实际上是一个好点。
让我这样做。
BEGIN BODY，END BODY，好吗？
好的。
我们来运行吧。
所以这个比我们之前的应用程序要大一些。
所以可能需要一点时间才能启动。
好的，如果你去另一个页面，让我们说主页。
好点子。
这是主页，我们去关于。
是的它应该挂钩。
好的。
这就是外面的一切，而且
这一点在这里 - 
一切都来自页面。
就在这儿。
是啊。
所以START MY PAGE，END MY PAGE。
合理？
是啊。
好吧，很酷。
所以我只是撤消所有这些，很少控制z，我们会在一瞬间回来，并尝试构建一些东西。
>>是的>>那是非常重要的。
究竟。
而且我们可能会犯一些错误。
它发生了。
希望我们能够学习。
我们感谢您与我们一起学习。
谢谢。
