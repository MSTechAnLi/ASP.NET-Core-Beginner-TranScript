嗨，欢迎回来
在这一节中，我们将来讨论 Razor Pages
在我们向你介绍页面概念之前，让我们来先来看下
现在我们将在 Visual Studio Code 和命令行之外查看它，我们将开始使用Visual Studio
是的，如果你看到这，应该看到我们已经在 Visual Studio Code 中完成了一些工作，我们十分兴奋地完成了一些页面
你还记得我们从一个空模板开始的步骤嘛
当然
我们从无到有，从一个 Hello World 的控制台应用程序到了包含一些页面的应用
我将关闭 Visual Studio Code ，然后在这里可以找到适合的 Visual Studio 版本，比如 Visual Studio for Windows
是的
如果你使用的是Mac，也可以使用 Visual Studio for Mac
现在，我将使用 Visual Studio 2017 的社区版，你可以在 VisualStudio.com 上获取此信息
而且这是免费的
免费，这就很棒，可 Visual Studio 的社区版对公司来说还是有一些小限制
但是，如果你作为开源开发者或用于学习，Visual Studio 的社区版已经足够专业了
好的
它实际上就是专业版，让你可以使用扩展，这是一个很棒的小工具
好吧，所以我想做的是，你能在这看到一些熟悉的界面，最近活动、新建项目等
你可以在左侧创建新项目，可能你看到内容会和这里不同，这取决于你安装的内容
当我运行 Visual Studio 的安装程序时，我把 Web 设置为了工作负载
你可能没有Android，但是你应该确保安装了 .Net Core Web 的工作负载
提问，你提到 Visual Studio 安装程序，是在下载 Visual Studio 时会用到吗？
问得好，让我把它打开，当你安装后你会看到这个应用程序，这是就是 Visual Studio 安装程序
安装程序是模块化的，所以它就会是这样一种形式
如果点击修改，你就可以多次运行安装程序，若你还想添加其他内容，也可以在安装 Visual Studio 后再次运行安装程序
看看，即使安装程序本身需要更新，当然现在只是巧合，安装程序也会有一些新东西
它会自动更新，就像现在这样，你在下载这个叫做 bootstrapper 的东西
这是一个小小的安装程序，可以获取你想要的东西
如果你安装了所有内容， Visual Studio 可能会非常大，或者如果你只想安装 Web 应用程序，或者你只想安装 Windows 应用程序，它可以在20分钟内完成安装
也就是说，它允许你自定义安装
确切地说，你自定义选择的东西称为工作负载，如云工作负载或移动设备工作负载
让我们继续吧，它已经完成了自动更新，你可以看到我在录制时，版本号为 Visual Studio Community 15.4
你应该确保你的版本应该至少比这个更高
如果我点击修改它会给我一些更多的选择
在这次课程前，我安装了通用 Windows 应用、 .NET 桌面程序以及 ASP.NET
但是你可以看到很多其他的选择，比如说有 Python 、 Node 、 Data Science 之类的
我可以在之后再添加这些模块，所以如果我想在 Linux 下开发 C++ ，我会选中它，然后就会提示我更新
现在，它正在计算下载这些东西需要多少容量
然后从这里你可以选择单个组件或选择你想要的特定工具，所以你看，我也选择了 F#
这一流程可以运行多次，我只想指出我运行它并安装了 Web 工作负载
所以在安装好 Web 工作负载之后，你将会在文件 > 新建 > 项目下看到 Web 页面的选项
到 Visual C# > Web 页面，我看到使用 .NET Framework 的 ASP.NET Web 应用程序，Windows 附带完整的 .NET Framework 框架
或者是 ASP.NET Core Web Apps ，它们当然适用于 Linux ， Mac 以及 Windows ，这就是我们今天所要用的
>> 好的 >> 很好，
我要双击它，根据 文件 > 新项目 ，它会在这里弹出对话
你需要仔细检查这个下拉列表，你的默认设置可能是 core 1.0 或 1.1，而你需要使用 2.0 或更高
你会注意到这些图标会根据你选择的内容而改变，我可以制作 Angular 应用程序， React.js 应用程序，或是完整的 MVC 应用程序
这里我们只用 Web App ，这是默认设置，它为我们提供了今天将要用的 Razor Pages
当然，Razor Pages 是 MVC 的一部分或者说基于 MVC　，所以它会是每个人的最佳选择，即最新的项目模板
如果你是在命令行中执行此操作，你还记得该怎么用吗？
>> Razor  >> dotnet new razor ,很好
好的，而在这里我只需双击它
当我们创建它时，我们将在右侧看到解决方案资源管理器
这和你使用 dotnet new razor 获得的是相同的效果，这对 dotnet new web 和 dotnet new mvc 来说是很重要的
体验是一致的
对，这是一样的体验，你不会希望使用 Visual Studio code 的人拥有与 Visual Studio 的专业人员有不同的体验
且输出的模板都是相匹配的，而在之前你需要在某个地方使用 yeoman 来实现
对，所有模板都是匹配的，这样既便利又整洁
在这显示了一个小的帮助页面，但让我们把这里放大，看看 Visual Studio for Windows 是如何展示这个项目的
你可以看到我们得到了比以前更多的页面，我们看到有 About 以及 Contact 页面
那根据我们对 Razor 路由的了解，这些页面的路由应该是什么？
/About ， /Context ， /Error ，其中 /Index 将是默认页面
很好， Index 页面将会是默认页面，现在有趣的是，在这些页面的下方还有东西
嗯？
这是在页面之后的代码，或者叫做页面模型，这是页面，而这是页面模型，它们会镶嵌在一起
这里有个细节值得注意一下，让我们在资源管理器中再确认一下这些文件，让我这选择 在资源管理器中打开
它应该显示为两个单独的文件？
它们是两个独立的文件
这里有 Index 以及 Index.cshtml ，它们显然是两个独立的文件
但在这却很方便，通过 Visual Studio 中的资源管理器，你可以清楚地看到文件之间的关系并将其隐藏起来
所以你能联想到汽车和发动机之间的关系吗？
是的，你可以这么理解，任何东西都会有层次结构，然后再往 .cs 之下探索将更有趣，它变成了一个类浏览器
好的
这些不是文件，显然这是一个属性，而这是一个方法
但现在我们正在逐步深入，你可以看到一些概念性的东西，而当你修改文件之后，这些信息都将会更新
因此，你可以在 Visual Studio 中看到一些在 Visual Studio Code 中不曾看到过的东西，且我可以对我所有的 C# 类进行此操作
还记得之前的 Startup 和 ConfigureService 以及所有的这些嘛
当然
类似的，像我们之前在上一个章节中用于配置的 appsettings.json
如果在这还标明了环境，比如 appsettings.production.json 或 appsettings.json ，那就是我们还没有谈到的东西
确实没有
记得之前，我注释掉了一行，以便看到 -
异常页面，是嘛
异常，那是在哪儿，你记得是什么地方吗？
嗯，我猜在你的 Startup 里面
>> 它就在那里    >> 是的
所以这里就是 UseDeveloperExceptionPage ，如果你回想一下，它只会在开发环境中执行
可每次我们运行的时候，它都是会显示我们正在生产环境中
是的
这让我非常伤心
然后我就这样做了，这让我解决了这个问题，但并不是正确的做法
行吧
让我们右键，属性，它是在构建还是调试中？
>> 转到 -  >> 调试
到这个页面后，你再添加它
是的，所以将环境变量 ASPNETCORE_ENVIRONMENT 设置为 Development 会有所不同
将其与配置相关联，你可以拥有不同的配置选项
你可以有 appsettings.Whatever
whatever 就真的是任意内容，像 foo 也行
任何东西
测试，分期
好的
嗯，只要你高兴写什么都行
在这种情况下，一个 appsettings.json 将包含一些东西
看起来它有，哎呀，按错了
我们将在稍后再来了解日志记录
然后是 Development 的配置
看看两者之间的区别
一个设置为 Warning，一个设置为 Debug
哇，原来这样啊
对，那还有一些信息
这比我们最初建立的要更复杂
让我们回到 Startup ，看看还有什么不同
就像我们之前所做的一样，我们有 Configuration 对象
我们有 services.AddMVC
在这有个异常处理，这是一小段有趣的代码
如果我们正在开发中，就显示开发人员最喜爱的异常处理页面
或者当你们正处于生产环境或除了开发之外的环境中时，我们将只显示这个错误
这样我们就不会泄露我们的源代码，也不会向外人展示一些东西
你在此之前让我用过 UseMVC
是的
这里包含了处理不同路由的用法
我们会在其他章节中再来讨论
然后我们使用了静态文件，以便你想要获取一个文件
请记住，有几次我们试图获取一个文件，但却被跳过了，就是因为我们没有在这使用它？
是的
当我们使用了 StaticFiles 后，如果程序能在磁盘上找到这个文件，它就会提供该文件
那么，如果我们将这行代码添加到上一个试验中，它是否会起作用？
它不会奏效
它会找到文件并将其提供给我们
但它会把它当作一个静态文件
好吧，这并不符合预期
而不是作为 Razor 页面来执行代码
所以这些事情的顺序很重要
比如你是想要运行它还是将其作为静态文件（比如 gif 或 html 页面）来提供，对吗？
所有在这一次探索过程中
我有漏掉什么吗？
我觉得应该没了
那很好
其实还有一点
在 wwwroot 目录下，这些就是静态的文件
我们有我们的图像和我们的 CSS
这些页面以及静态文件都是在 root 目录中
然后我们的 Razor 页面，将位于 Pages 文件夹
但是，当我想获得一个图片，比如 /images 或 /something ，这些都将由 wwwroot 提供
然后，这还有一个新的知识点，就是页面导入和布局
说的好
还记得在我们早些试验的时候，在这儿我们使用了 @page 以及 @inject ，但这还不够，我们还需要使用 @using
然后突然我们还有了更多的指令，再然后我们还会有一些代码？
是啊
那有点奇怪
好吧，你可以创建一个名为Viewimports的文件，这些就是你希望每个页面都有的东西
是的，所以我们希望每个页面都使用这个命名空间
而且对每个页面来说，这是使用名称空间，这是这些页面本身的名称空间
这还有一个叫做标签帮助器的东西，我们将在中间件中讨论
是，我们会的
然后 ViewStart 是一段多行代码
你可以写任意的代码，这些将在每个页面中运行
好的
好吧，因此，如果每个视图都需要检查某人的姓名，或检查 cookie 或其他什么
这取决于你想做什么
但这些就是导入，所有不同的注入，所有不同的引用
这是你想要的一些代码
在这，它讲设置布局
这就像主页一样，其他的任意页面都会包含在内
所以在这里， _Layout.cshtml 是一个 Razor 页面，它包含了最外层的 html , head 以及 CSS
可能在某个地方还有一个页脚
是的，页脚在这里
这有一些 Bootstrap 和一些不同的 JavaScript
然后你的 Razor 页面被叫做 Body
它将会在这被渲染
它就在那里呈现
这实际上是一个好主意
让我来试下
BEGIN BODY，END BODY，可以吗？
可以
让我们来运行一下吧
这比我们之前的应用程序要大一些
所以可能需要一点时间才能启动
好的，如果你转到另一个页面，我们已经看过主页了
好主意
这是主页，我们去关于页面
是的，它应该也是一样
对的
这就是外面的一切，而且这些将是来自于
一切都来自页面
就在这儿
是啊
试下 START MY PAGE ， END MY PAGE
可以吗？
可以
很好，很酷
然后我撤消这些，只需 Ctrl + z
我们将很快就会回来，然后试着做一些东西
>> 是的  >> 那是非常重要的
当然啦
而且我们可能会犯一些错误
它已经发生了
希望我们能够学习些知识
感谢你与我们一起学习
谢谢
