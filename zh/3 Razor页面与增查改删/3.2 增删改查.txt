朋友们, 我们很高兴你仍然和我们在一起在微软虚拟学院, 因为我们做我们的介绍 ASP.NET 核心

我们正在学习关于剃刀页和我们的应用

这个模块将会更长一些。

是的, 它会的。

它可能会让我们一起犯一些错误,

那没关系

我们会尽量不隐瞒任何事

我们正在按照我们希望的那样做文档, 也许你也可以跟着做。

暂停, 尝试的东西, 也许谷歌与 Bing。

谷歌与 Bing。

如果你有麻烦和被卡住。

是的, 我们将有链接的文件在这个录音下面。

好吧, 所以我们要尝试制作一个 CRUD 页面。

什么是 CRUD？

创建、读取、更新、删除。

好吧, 所以一个 crud 应用程序将谓词从 crud 映射到我们习惯使用的动词, 如 "获取" 是 "获取", 因此它就像一个读取。

如果你要创造一些东西, 那将是一个帖子。

所以你要填写一个表单, 你会点击提交, 它会张贴的数据, 这是一个创建, 然后你可以读回, 看看在编辑页面, 然后可能删除它。

所以, 如果我们成功了, 我们将有简单的形式, 也许创建一些客户, 把它们放在一个假的数据库, 我们会没事的

是的, 我将在中级课程中了解更多关于数据库的信息, 以及

是的, 就像数据库的整个部分。

现在, 我们将在内存中的数据库中进行此操作。

好吧我们尽我们所能吧

我们将使用同一个我们以前创建的 web 应用程序。

我们在前面的模块中看到我们添加了 MVC, 但当然所有的东西都是为我们添加的, 因为我们去了文件 > 新的项目, 我们选择了 Web 应用程序, 好吗？

所以在这里配置服务, 我们有 AddMvc。

但是我们要在这里制作我们的内存数据库。

我们要说的是服务。AddDbContext < >

是的, 给它的名字

我们要创造一个叫 AppDbContext 的东西。

我们可以把它命名为任何我们想要的。

我们还没写过但我们会的

我要打 Ctrl + 点。

它说, 嘿, 你需要 AppDbContext 吗？

你想去生成一个吗？

我想继续说 "是"。

因此, 它已经消失并完成了, 我们将在一分钟内处理。

再一次, 我很可能会犯错误, 所以你会容忍我, 我希望。

我打开了括号。

我会通过一些选择。

-我要传递给数据库上下文的选项是选项-UseInmemory。

-使用。

MemoryDatabase。

是啊, 但为什么这不显示, 完美的原因。

我们需要添加

为什么没有出现？

因此, 我们需要添加实体框架。

所以我们需要使用

我可能应该添加, 首先, 并

我会得到智能感知。

-真的-让我们试试看。

如果我们回到顶端。

因此, 我们预先添加 EntityFrameworkCore。

看, 你看见那只小箭朝下了吗？

这就意味着这个方法是由我们刚刚 UseIn 的事实所包含的。

这叫做扩展方法。

这是一起兜风的事。

你看它实际上说扩展。

那是几秒钟前的事了

不不是的

添加 InMemoryDatabase, 一些名称的权利, 然后我们看的曲线, 我们担心。

曲线有什么意义吗？

所以, 这里说的是 AddDbContext。

嗯, 我们从来没有真正去做任何事情, AddDbContext。

我们到那边去修好它

我要右键单击并说 "转到定义"。

让我们来处理数据库上下文。

这是一种标准的东西, 所以不要太担心。

但基本上这是代表数据库。

我在那里打 Ctrl + 点。

我会说让它成为一个 AppDbContext,

这是一个构造函数, 好吗？

好的, 我们会采取一些选择。

ContextOptions。

-哎呀, optoons-选项。

选项, 传递到基类这些选项。

我要把它放进去。

我试图放大, 使它对你有帮助, 我最终使它更糟我自己。

好吧, 至少你还有其他人在想。

-我有。然后-你必须设置某种形式。

我们有一套, 我们要说客户？

所以我们有一组客户。

客户在这里不存在。

所以 squiggled 了

然后我们做一个吸气, setter, 得到;准备好吗？

顾客 squiggled 了。

找不到类型或命名空间 "客户"。

那是真的因为我们还没有做过一个。

我们还没有弥补。

我可以键入控制点, 但我要单击 "显示潜在修复程序"。

这有点有趣。

在这里说, 嗯, 我可以去为你做客户。

但是看看这个

它的建议是其他软件包, 有客户和名称的客户在其中。

所以这些是其他 NuGet 包, 包在世界上。

是啊, 是不是很酷？

太酷了

包外面有这个词的客户

有这个词的客户。

不我不想要那些

但是, 如果我做的东西与 JSON 或做一些技术, 我知道我将需要 NuGet 包, 后来它会给我。

所以我要说生成新文件, 这似乎是合理的。

-好的, 这产生了。

现在注意到它刚刚出现。

-就在那里。

-现在我要右键单击并说 "转到定义"。

值得指出的是, 我也可以右键单击并表示峰值定义。

-你能在那里写字吗？-我可以。

我想那会有点奇怪。

但然后我可以点击这个小标签在这里推广到文件, 现在我跳进了该文件。

所以我可以偷看, 然后如果我打字一点点, 我觉得这是烦人的, 然后我可以跳得更高。

-这很顺利。-这是相当顺利的。

-好吧, 我再给你看一个平滑的提示。-我知道。

是的?你想建议吗？-选项卡选项卡的事情？

-是的, 准备好了吗？-道具标签。

-选项卡, tab-int 选项卡 Id 输入输入道具选项卡选项卡字符串输入选项卡名称。

-这有多酷？-很酷, 我总是忘了用它。

-你得用它。-我总是忘了使用它, 它很棒。

-那里有很多好东西。-还有 propfull。

-那有什么用？-这给你一个后备变量。

有 propa, 我不知道它做什么, 但它是疯狂的。

有个 propg 的人和一个私人的猎犬在一起

是的, 一堆东西。

-您是否已在所有属性上完成了博客文章

有一堆片段, 我可以整天去。

但现在我要用道具了

所以这是客户, 所以客户有一个 id, 一个唯一的 id。

他们有名字

他们可能有一封电子邮件, 他们可以有所有这些东西。

是的.-我们现在就从名称开始, 但名称是否有某些限制？

-应该的。-我们有一个数据注释的想法。

这些数据有注释, 是的。

因此, 其中一个问题是, 你可能希望有人输入他们的名字, 对不对？

-我们想强迫他们。-我们想强迫他们, 所以我们要确保它某种要求, 对不对？

所以需要, 我把它作为一个符号在这里, 我会再次击中 Ctrl + 点。

当你知道这些东西存在, 你在想他们, 而不是键入所有这些东西的使用, 你只是要键入要求。

点击 Ctrl + 点, 然后点击 Enter。

1行刚刚出现在那里, 然后我们将强制长度以及。

我们会傻了一会儿, 我们会说10的长度。

这不是一个很好的长度。

这不是一个很好的长度。

但这可能允许我们稍后进行验证。

然后我们将它改成更长的长度。

好了, 让我们退后一会看看我们在这里做了什么。

所以我们开始了一个 InMemoryDatabase。

不是 SQLserver 或。

无论是在内存数据库。

我们有一个客户的开端, 唯一的 ID 和一个名字上的一些注释, 然后在这里的一个小类是空的。

这是我们的客户列表, 实际上是什么客户单数在这里。

是的.-那应该是顾客。

-好吧, 因为, 你有一套。-这是一组客户。

有一件事, 我们怎么才能看到这些信息呢？

嗯, 我们需要在数据库中放置一些, 然后, 一旦我们在数据库中, 将它们列出。

就像我们如何在视觉上看到它？

是的, 所以这里有一点鸡肉和鸡蛋问题。

我们先把清单页列出来, 然后列出来吗？

但我们真的不能因为我们没有。

-你什么都没有, 是的。-或者我们先制作一个创建页面。

-所以这是 CRUD。-我们先做 C, 好吗？

-在页面文件夹中。

页, 让我们做创建。

现在, 我们不会像以前那样说新文件了。

不, 你要创建一个新的剃刀页面, 或者如果你去新的文件。

让我再来一次

右键单击, 我有两个选择, 我有新的。

-然后。页或我可以说项目。

是的, 新项目。

他们应该是选择剃刀页面。

-对, 所以你有几个不同的选择在这里, 这是所有不同的事情, 你可以做。

我要去右键点击, 并说添加剃刀页面, 我想指出, 我不会这样做, 因为它会有点作弊, 但我们都完成后, 首先, 我们让你受苦。

然后我们给你一个简单的方法

然后我们给你一个简单的方法

我们可以创建该模型, 并说剃刀页面使用实体框架 CRUD, 然后它会脚手架或生成。

-我们要做的每一件事。

但是做起来更有趣, 不不, 我们自己去做更有趣, 你不觉得吗？

-好的。-好吧, 我们自己动手吧。

人们如果不喜欢就可以快速前进。

页面名称将被创建。

嗯, 然后我们要使用布局, 我们看到了。

然后, 这里说生成 PageModel, 这是该网页模型背后的代码。

如果我们想的话, 我们可以说不, 然后按行进行。

好吧。让我们看看是否可行。

思考, 思考, 思考。

我们将在右侧观看, 因为创建应该出现。

并坚持好, 因为它做了相当多的脚手架。

嗯, 它的脚手架的一些劳动力, 但它也将建立应用程序, 看看它是否仍然建立。

如果它正在运行一个围巾文件夹。

和疤痕文件夹是什么, 你可以去和阅读, 并写你自己, 如果你觉得喜欢它。

所以我们要创造。

让我们看看里面有什么。

让我们看看它给了我们一个页面。

它给了我们一个默认的模型, 一个标题, 看起来像一个标题, 然后一些验证脚本, 然后大概我们可以开始键入我们的网页或任何东西。

让我们看看后端。

它制作了一个具有 "获取" 的创建模型。

这就是当我们得到东西时发生的函数。

好。

好的, 我们需要做表单代码。

好的, 这样的形式, 实际上只有一个条目？

是的, 所以我们会说输入你的名字, 图, 好的。

谁知道这是否会奏效, 我们还要学习。

现在, 这是有趣的, 注意到, 当我键入的形式为什么是紫色的？

变成紫色, 所以这是一个标记帮助器, 这是一些相关的元素, 将在服务器上进行处理, 使服务器知道紫色元素, 生病做一些处理。

通常, 当你在 HTML, 你有像 P 标签或图像标签或 div, 这只是字符串, 被发送到客户端。

但是, 当我们在服务器端生成这些内容时, 可能有一个 ASP.NET 核心的机会来改进它, 改变它, 添加一些东西。

所以它知道形式。

表单是一个魔术标签, 我们可以去和键入这样的东西, 你看它说, asp 冒号。

是的, 这是否表明这是一个标记助手或某种行为？

对, 这些东西不是 html。

不。

这些是标签助手。

您将永远不会看到 asp 连字符被发送到浏览器的东西。

这些不是 HTML。

它们是服务器的提示。

所以, 如果我们运行这个应用程序, 我们进入 F12 工具, 我们不会看到-你不应该看到这些。

好。完全。

所以我们要说的形式, 这将是基本的方法 = a, 是的, 看-好的。

得到, 张贴, 放, 删除。

我们会说邮政, 所以我们要去和张贴。

这是我们的形式的结束。

说 div, 名字, 然后我们需要一个文本框。

是的, 所以某种输入标签。

是的输入。

现在, 这很有趣。

我们可以做一个输入标签, 我们通常这样做, 或者我们可以说, ASP. NET4。

好。

我们要说的是客户名称。

好。

看怎么都是紫色的？

ASP 4 要看那个模型, 好吗？

现在, 这是说, 我不知道什么是客户。

这是怎么回事？

以前从未听说过客户。

我们一会儿再来解决这个问题。

然后我们就有了提交表格的输入, 好吗？

但我们在这里有一个问题, 它不知道客户是什么。

此页面的模型是什么？

对, 这是-创造。

CreateModel, 我们去看看吧。

偷看定义好吧

我想指出我是如何走动的。

我右键点击, 并说去定义也是一个热键。

因此, 这是一个重要的提醒, 就像一个程序员, 你不希望有必要发现自己的过去, 并环顾四周所有的文件所有的时间。

你可以导航到它, 对吧？

直接地, 你可以按照他们说的逻辑导航。

-好的, 行了。-是吗？

剪掉一些东西-是的。

-好的-好极了。

-我们走-我剪掉了 CreateModel, 谢谢。

因此, 我们的创建模型将需要了解客户, 因为这将显示在页面上。

所以公共客户, 这是一种类型。

-这是一个名字--你可以用颜色来辨别。

有点迷惑

但是, 该属性称为 "客户", 并且该类型称为 "客户"。

而且, 这将需要数据库上下文, 所以我们要在这里做一个小数据库。

这只是在家里做这个的人的声音。

你为什么把它改为私人阅读？

这是一个很好的观点。

我不希望那些拥有创建模型的人可以四处打探并直接与数据库交谈。

所以, 这将是私人的, 只为我在那里我是 CreateModel。

它的阅读, 这意味着我要分配一次, 我不想让任何人碰它后。

是的。好。

所以我只为我做, 并确保我不能搞砸它事后。

非常好的问题

那么, 我们将使我们的 CreateModel 我们的构造器。

还要记住依赖注入是如何工作的。

我们不 AppDbContext, 我们要一个。

我们要求它把它放在我们的构造函数。

我们可以拥有尽可能多的这些。

我们可以吃东西, 酒吧等等, 等等。

这就是我们现在想要的。

然后我要说嘿, 这一个等于这个。

我要把它扔掉, 然后挂在上面, 所以现在我有一个。

所以说有这个数据库, 我想知道它。

上面说有个顾客

如果我回去创建, 我可以悬停在上面, 并看到它也得到我可能智能感知太多。

是的, 看。现在是。

所以, 它知道客户, 因为它是挂掉的模型。

因此, 当我们运行应用程序。

从技术上讲, 我应该能够进入这个页面, 悬停在客户名称上, 看看我们在里面放了什么名字？

你应该能够点击它, 你应该能够有智能感知。

如果你做了一个断点, 你应该可以在这里停下来, 看看, 我们会做一点点。

但是, 我们需要绑定此窗体。

我们说的是客户名称的输入。

当我点击提交, 我们需要抓住它在服务器端。

我叫它在旅途中幸存下来。

好。是的, 这是个好观点。

它确实需要在旅途中幸存下来。

所以我要把这里的 OnGet 除掉

所以我们要做一个帖子。

你可以说 OnPost。

你可以这样做, 但正确的方法是这样做。

异步?-异步, 这意味着不阻止, 我们将有一个任务, 返回一些行动。

我们可能会在这之后做些什么, 我会在 OnPostAsync 上说。

这让我有点抱怨!

你没有做一个等待, 你没有返回一个值。

代码路径, 而不是所有代码路径都返回值。

那是因为我们还没有做什么。

所以, 当有人回退, 他们点击提交, 并张贴回这里。

我们真的很希望客户有东西在里面。

-是的-所以这里有几件事。

然后, 我们需要确保该模型的状态是有效的, 有人没有搞砸它。

所以我要说如果 ModelState. IsValid, 或者如果不是, 请原谅我-我正要说些什么。

不, 我很感激。

然后返回页面回自己说, 现在我已经完成。

如果我悬停在页面上, 您可以看到它返回一个页面结果, 这是一种操作。

返回页面是一个操作。

如果我们走得这么远, 现在我要说 db, 记得我说 db 吗？

-是-什么是 db？

这是一个 applicationDB 的语境。

在那里有客户, 复数。

-我们要添加一个。-.添加 ()。

我们会把刚交的客户送过去。

然后我们会说, 出去玩一会儿, 等待。

我们会说, db。SaveChanges.

异步意味着不要等待。

然后我们将返回, 而不是页面, 因为我们在创建页面。

我们真的想回到名单上。

是啊你在做重定向？

我们要做一个重定向, 确切地说。

我们还没有地方可去。

但我们会说重定向到页面。

好。你可以看到, 有一个选项, 如重定向到页面永久, 这将是一个301。

Http 301。

好。我们要做 302, 因为这只是一种标准的重定向。

我们就说/指数。

我想我们应该说/, 但我们会看看会发生什么。

如果人们想了解更多关于 301s, 302s, 你有什么建议吗？

-互联网。-正确

我会到处找那种东西。

最后看看这些文档。

是的。但重定向到页面是一个标准的东西, 再次如果你悬停在它, 它说, 就在那里 Status302Found。

但如果我说 RedirectToPagePermanent。

我们会改变它吗？

把它改成 301, 这会告诉搜索引擎, 不要再回来问我这个了。

别再跟我说话了

好吧。这就是意思。

我是偏执狂所以无论如何, 当你做数据库工作时, 你永远不会想这样做。

你总是想暂时的, 好吗？

好。好吧如果你真的真的想让同事心烦的话

你可以移动你的花括号。

是的。

做这样的事

如果你真的想成为可能的越野车, 你甚至可以做这样的事情。

这是唯一的一条线。

是的？

但你可能有其他的东西, 你想做的。

好。有些人真的很困扰他们, 有些人却不喜欢。

对我来说-你不介意吗？

我喜欢一条线, 如果这不是一个大的协议。

你知道我的意思？

但是一旦你有了一条额外的线, 你就会去解开它, 把它拆开。

这是文体的。

所以现在有人知道这不是最好的做法。

不, 现在, 我只是觉得把一切都放在一条线上很好。

但用的是卷曲的胡须。

是大括号, 如果你转动你的头, 他们看起来像一个胡子。

这是最好的做法。

它仍然得到我们, 当人们说大括号, 我不知道他们在说什么, 因为我使用括号。

你怎么称呼他们？

你叫他们括弧？

所以你有括号, 花括号, 方括号, 所以。

-丑闻-好吧

-你很喜欢-这是相当激烈的。

-好的, 现在我要在这里放一个断点。

好.我们看看这是否管用-好的

它可能很好不工作。

手指交叉和脚趾。

不, 可能行不通。

现在降低你的期望值。

-好吧。

这是在创建, 对不对？

是的。所以我要打/创造。

-好的

-我们绑好了吗？

-看到发生什么事了吗？没有.

不。如果我们去做一个视图源。

-你去？好.

我只是想先向大家展示一下表格。

有些事情出现在输入, 这是有点酷。

-这是挺不错的-这是

我们没打字对吧记得吗？

所以我们得到的东西的输入, 我们没有料到, 这是很酷的。

我打赌有些请求验证。

是的, 他们提出了一个请求验证令牌, 以防止人们篡改我们的东西。

有你的名字 = 客户名称。

它也为我们生成了一个 id。

但你可以看到什么都没有发生。

在客户, 其实我想把一个休息点更高一点, 然后我会告诉你发生了什么事。

-好的-让我们看看我们是否能到达岗位。

好了, 再做一次调试会话/创建。

所以我早就料到了

打那个断点。

打那个断点, 所以这是有关。

但我知道, 我需要说 BindProperty 在客户, 这是告诉它, 我想这个客户对象填写表单信息, 对不对？

是的.-现在我没有那个了。

让我们来看看, 再试一次。

客户将被创建并填充与这些表单域绑定的信息。

如果这不起作用, 那么我已经忘记了一些东西, 我们将去和有一个小的调试, 这将是有趣的。

他们说精神错乱的定义是一遍又一遍地做同样的事情, 并期待着不同的结果。

所以让我们来看看。

可能是显而易见的事情。

所以我们有一个表格, 我们有我们的输入, 我们有我们的方法。

我说了帖子, 是不是全是大写？

如果确实如此, 那就奇怪了。

所以没关系。

标记帮助器已存在于视图导入中, 窗体在那里。

我唯一没有添加的是验证摘要, 好吗？

-好吧, 所以我把一个很长的名字, 花哨的裤子, 什么都没有发生。

不。没有, 我意识到我已经得到了我的表单与我的客户名称输入, 但我把我的验证摘要在表单之外。

-好的-所以我要把它放在表单中, 因为它正在验证表单。

然后我要打刷新, 花哨的裤子, 看, 它说, 域名, 必须是一个字符串, 最大长度为10。

我得到了免费的验证, 对吗？

那10是从哪里来的？

我们把它放进去了没错

我们把它放在那里。

所以, 也许我们会改变, 像 25, 或类似的东西。

有些人有很长的名字像在我的国家谁有名字是 50, 所以也许100？

我会赚 49, 然后50人, 他们会受苦的。

男人, 包容。但关键是它是由他们驱动的。

他们, 好吗？

还有一件事--如果有人输入了不是电子邮件的东西, 就会一样, 对吗？

是的, 它可能是一封电子邮件, 它可能是, 你可以放在验证信息, 但你想要的, 你甚至可以放入自定义, 正则表达式, 甚至编写自己的自定义验证程序。

所以他们可以像你想要的那样老练。

-好吧-你也可以, 我相信, 说, 我想要一个跨度。

并说, asp 验证, 你可以去做一个字段验证, 好吧。

所以在这里我说这是我对所有不同的事情的总结, 这是一个特定的验证为客户的名称。

好吧, 让我们看看那是什么样子。

这看起来有点不同, 所以如果我来到这里, 回到这里, 点击刷新, 哎呀, 我实际上不刷新。

我需要再次运行我的应用程序, 因为我停止了它。

好。

再跑一次

转到创建。

我想这次我们真的很久了对吧？

我制表符, 它说它必须是一个字符串, 最大长度为49。

好。

好吧但我喜欢主要的验证材料所以我们就这样离开好吗？

现在, 让我们回到我们的断点, 运行调试器这次, 看看我们能否看到客户得到发现。

好。

我们以前看过 F12 开发工具, 我们可以看到电线上发生了什么。

这是一个很好的方式, 有点只是看看发生了什么事情, 你做你的帖子。

所以, 当你在寻找, 所以你去了开发工具。

是的。网络呢？

我去点点小点开发者工具, 我们在网络下。

好。我会去, 并可能和清除它, 然后我们将在玛丽亚, 好吧。

是的, 我们去了, 所以如果你在上面盘旋。

如果我们悬停在客户上, 请参阅, 因为客户有一个名称。

是的。客户名称, 我们为字段客户命名. 名字, 我们告诉它, 嘿, 捆绑, 我们希望你参与。

你会自动出现在那里的

好。我也可以在那里放一个小别针。

如果我要做很多调试会话, 那么我可以让你在那里作为一个帖子来注意和观察客户名称的变化随着时间的推移。

这是一个好的。

我们可以去看看模型状态是否有效。

-什么是绿色按钮, 这是一个游戏-是的, 去到那一点。

发挥到这一点, 然后停止。

所以在这里, 我要去把这个客户添加到数据库。

将其保存到数据库中, 这当然是内存中的数据库。

嗯嗯然后我们再重定向

现在我们已经投入了斜线, 但我不知道这是否能奏效。

我们是否应该看看他们的网页, 以防万一？

-是的, 看到了吗？好.

它说没有页面/匹配这个值。

所以你必须给出具体的名称。

我需要说索引, 这是我们的主页在这里。

所以索引, 好吗？

现在我们来确认这是否可行。

我可以打 F5 去调试, 或者我可以打 Ctrl+F5,which 我喜欢做的, 因为它的启动速度有点快, 如果我知道我不会做一个调试会话。

但这次你打 F5？

我打 Ctrl+F5 跑得更快。

好吧, 所以它重定向我到索引, 但当然我还没有做任何索引, 这是有趣的。

好。

这将是下一部分, 对。

所以你也可能会发送消息说

我可以说, 客户更新, 或任何。

但让我们把这整个部分撕掉。

-好的, 很好-并列出的内容。

-好的-很酷吗？

我们的指数呢？

所以这是所有的旋转木马和这些东西。

所有的花哨的引导。

我真的要收集这个

然后你评论出来？

事实上, 不, 我只会很棒, 就像扔它一样。

哇。是的, 但这是一种方式, 如果你想去狩猎的另一侧的 div, 你可以把这些折叠起来, 看到这匹配。

把它折叠起来, 选择它并扔掉它。

酷, 好吧。

所以, 让我们做我们的形式。

这将在索引页上, 对吗？

是的。我们将有方法 = "post", 这将是一个表。

好吧。

如果它是数据表, 则使用表是可以的。

很多人抱怨餐桌是个坏主意。

我觉得这有点好笑。

笑这是一张桌子。

有一张桌子是可以的。

所以我们将有一个头, 我们的桌子, 我们将有我们的 ID 行。

-哎呀, 我们会有身份证的。

然后, 我们将有名称, 我们并不真的需要显示数据库 ID, 但现在让我们来展示它。

好吧。

很酷吧？所以你必须创建一个 tbody, 好吧, 你比我领先。

不没事的表正文

但现在我需要每一个排。

所以, 你会把它放在一行, 或者你, 所以我认为你需要去的每一个接触内。

完全。

所以我想在这里做点什么。

然后是几个单元格, 表格单元格, 然后可能是一个, 我不知道, 像一个链接编辑和删除按钮。

是的。

好吧你看我是怎么画出来的

你在画草图

好。野, 叫什么来着？

伪代码还是什么？伪 代码。

是的。这是一个小伪代码。

所以现在我想说的是。

为每个是的。这是一个片段-

-好的, 制表符, 然后我会说, 每个, 联系, 哎呀, 接触, 在什么？

在模型中。

现在我们的客户在哪里？

好了, 记得我们在做创建模型的时候吗？

我们需要让顾客从某处来。

是的。现在我们在一个完全不同的页面。

是的, 所以我们必须有客户。

我们必须要有顾客, 对吗？

是的。所以我要在这里休息一下。

我要跳到指数模型, 因为我们不能真正做我们的桌子, 直到我们有一点点, 好吗？

我要打破一些基本规则, 我要复制粘贴一个小代码, 因为我将需要这个类似的应用程序数据库。

这个应用程序 db 上下文, 这将节省自己的时间在这里。

所以, 我们有我们的应用程序上下文, 对不对？

我们将有我们的索引页模型。

现在, 在我们创建客户时, 我们创建一个客户。

但在这里, 我们的模型是不同的, 因为我们将有一个客户列表, 这一页, 对不对？

所以我们的模型是不同的。

我们会做一个获取, 然后一个私人设置, 以便只有我们可以设置它。

好吧, 然后, 在 OnGet, 我们会说 OnGet。

下面一行, OnGetAsync, 好的。

-OnGetAsync, 对吗？-我们要给客户加装。

我们从哪儿弄来的？

数据库, 这是正确的。

我们要把他们从顾客身上拿出来。

然后还有另外一点你可以添加的东西, 使事情更快一点。

你可以说 AsNoTracking。

我会告诉你这意味着什么, 在一秒钟。

我们将把这些客户变成客户列表。

所以我们把东西放在一起, 我们是说给我这些客户。

我们不打算跟踪他们的变化。

您会看到它说禁用更改跟踪对只读方案很有用。

更改跟踪是在监视所有可以更改的不同内容的跟踪, 以便您知道如何进行数据库更新。

所以, 如果我有一个客户列表, 我想看他们, 并改变他们的名字, 这将给数据库系统实体框架, 我们将了解有关如何只更改位更改所需的所有信息, 如何只更改数据库。

但我们只是得到了一个列表, 所以我们要说, 不要跟踪这些, 只要给我一个列表。

所以客户, 没有跟踪, 给我一个列表, 所以这很酷。

我想我们现在就这样离开吧。

我们回去索引。

现在这个模型, 我们身后的页面有客户。

看, 顾客出现了, 看, 这很好。

所以我想我可以把我的 tr 在这里。

我希望, 记住, 我说的联系, 我应该说客户。

客户单数, foreach 客户, 这意味着客户变量现在可以给我客户。

-一切都连接好了, 酷, 让我们尝试一下。

好。然后我们再做剩下的, 因为我不知道这是否能奏效。

现在, 我使用内存中的数据库, 所以每次我运行这个, 它会消失。

所以它只是一个丢弃数据库。

-我需要做得更好-我需要也许以后做测试, 并且我在旅途中生存了。

-让我们看看, 但一旦我关闭你, 它就会消失。

所以, 如果你刷新网页-你在这里, 你还在那里, 对不对？

直到我关闭浏览器, 你才会在那里。

如果我关闭浏览器, 请原谅我, 直到我停止 web 服务器。

-好吧-好的, 谢谢, 很酷, 所以现在我们有了创建。

我们应该在下面的某个地方放一个按钮。

我们已经得到了一些验证, 我们已经得到了我们的数据库, 看着我们的朋友, 这是做一个东西叫后重定向获取。

所以我在这里, 我打了一个帖子, 我们做了一个重定向, 然后我们做一个得到, 然后我们会得到这些东西在这里。

所以这是一个 PRG, 开机自检重定向获取。

网上有很多关于那方面的文章。

现在让我们做一个链接, 从理论上去和编辑这些东西。

-好的-然后我们将有一个按钮删除。

这些东西在后端还不存在, 但是我们可以-所以是的, 所以我们还没有编辑页面。

我们不。

好。我们可以做一个链接。

现在我可以去把一个链接, href。

你已经做了100万次了

然后说/编辑, 然后放入字符串和东西。

但请记住, 我们谈到了如何伟大的标签助手。

-是的-如果我们去和 asp 页面说, 然后我们可以去说有一个编辑页面, 然后它会弄清楚什么是 URL 看起来像。

-好吧, 然后它甚至可以用某种方式表达路线。

我们一会儿再谈路线。

我想是路线 id

我想我们称它为客户 Id。

因此, 它将采取该客户的 id, 所以我们想基本上做一个页面, 看起来像/edit/2,/edit/3, 对不对？

这是路线 id, 将得到添加到这一点。

好吧, 那么接下来你要做的就是一个按钮？

是的, 我们将做一个按钮类型 = "提交", 这将由页面处理。

-好-按钮会有点不同。

我们在 href 中执行按钮的原因是, 您可以看到链接的不同之处, 以及链接的行为方式和按钮。

一个链接将导航到某处。

-是的-一个按钮会引起一个帖子, 对吗？

因此, 此操作将由删除处理程序来处理。

但我们也需要该路由信息, 我们需要该 id, 因为我们要删除一个特定的客户。

所以你需要的内容 ID, 是的。

确切地说是客户 ID。

好吧, 然后这些都没有挂钩。

所以你提到的东西, 在家里的人的声音, 关于按钮是一个帖子。

是的, 它将回退, 然后我们将需要处理这种行为不同于创建页面。

所以, 我只是把一个链接在底部有创建。

所以我只是要刷新。

所以, 让我们看看, 如果创建-这是我们的创建。

好。

仍然有效。

好。我盘旋在那上面。

什么都没有发生, 因为我们没有编辑。

我们从来没有做过编辑页面, 我点击删除你应该。

因为我不知道你在做什么, 所以会崩溃的, 对吗？

它只是在中间的东西, 它的困惑, 因为这不是我要求它做的事情。

好了, 我们要做些准备。

-让我们先尝试删除-好的。好了我们过去吧

-我们做了一个 OnGet-让我们去做一个 OnDelete。

-好-与以前的 IActionResult 一样, 除了现在我们要说, 这是有点怪异, OnPostDelete。

谓词删除是一个真正的 HTTP 谓词, 但它不是真的经常使用从浏览器的角度来看。

它通常做, 因为它是背着在开机自检。

我们使用帖子基本上传递各种信息。

每当我们在表单上按下提交时, 就会发布该表单。

我们正在添加, 我认为我们说, 页面处理程序删除。

所以, 这将是在这里, OnPostDelete。

现在我们要说, 客户, 客户奇异。

我们会去把客户从数据库中取出来

在我们删除它之前, 我们必须去得到它, 以确保它在那里, 我说找到, 通过的 ID, 通过了。

所以, 现在我们要检查是否该客户的 null, 因为如果它是空的, 那么我们甚至不麻烦。

如果不是空的, 就做点什么。

然后我们就可以去重定向了

到页面。

到一页, 确切地说, 谢谢。

所以在这里, 我们要从数据库中删除它。

我们在内存数据库中做它, 但这并不重要, 因为如果它是一个常规数据库, 它会删除它为我们, 以及, 这是好的任何框架。

我不是一个很好的打字员。

因此, 我们删除客户, 然后我们去, 我们保存这些更改。

-好的-然后我希望它会重定向到页面, 同一页。

是的。我希望它会从该列表中消失, 因为它将返回到数据库并再次生成列表。

-这有道理吗？-确实如此。

我想这就是它会做的。

因此, 我们越过我们的手指, 希望它的工作。

如果没有, 我们就学会了。

-好-那不是个好名字。

好了我们要删除你了

好吧我很好

它确实按你所希望的方式工作。

是的, 它确实起作用了。

-火, 火, 火交易, 交易, 交易。

-漂亮的裤子-但现在, 如果我们编辑它。

不起作用, 因为编辑不存在。

它不在那里。

好吧那我们去做编辑吧

所以我们会按你说的做, 添加剃刀页面。

叫它编辑, 现在我知道你喜欢路由。

路由是你最喜欢的事情之一 ASP.NET。

因此, 这个编辑页面将是第一次, 我们曾经有一个页面, 其中的信息。

-好的-在哪里可以通过身份证？

-那么在页面上？-右引号。

是的, 还有花括号。

-是的-ID。

我的意思是 int。

好的, 所以 ID 是 int 类型。

是的。这就是类型提示。

所以这是说编辑斜线3。

所以你会在浏览器中看到它, 这就是它的样子。

好。

我们有我们的编辑模型, 然后在这里, 在顶部, 我们可能有编辑, 我们实际上可以添加一点文本在这里。

我们可以说编辑客户。

然后我们可以说-破折号模型？

@Model. 客户, 但再次, 我们没有得到智能感知, 为什么不呢？

因为每个页面的页面模型是不同的。

完全。

所以, 让我们去看看一个编辑。

所以我要。

你得走了, 是的。

再借一次。

当然, 我可以做另一个类, 一个基类, 这将拉 AppDBContext, 所以我不需要保持复制粘贴, 因为在某个时候, 复制粘贴变得乏味。

你想让它保持干燥对吧

不要重复你自己。

你可能希望那能在旅途中幸存对吧？

是的。

好。

所以我们想在旅途中幸存, bindproperty, 好吧。

所以我回到我们的页面, 让我们看看这是否奏效。

真的很好

是的, 的确如此。

所以现在我们可以说, 我们是 Model.Customer.Id, 所以我们可以说, 编辑客户, 或任何。

然后形成, 然后是一个表单帖子, 还有很多很酷的方法可以让你的表单更容易写。

如果你觉得写作形式单调乏味, 有一个很好的方式来写表单, 称为安谧。

什么是安谧？

你没听说过安谧吗？

e t, 就像名字, 人的名字安谧。

好。这是一种描述你想要的感觉像 trt 的方式。

TR TD 乘以三, 然后你会点击标签, 然后它会去和扩展它, 这是一个方法来写 HTML 标签真的非常快。

-它是内置的吗？-它是内置的视觉演播室代码, 但它还没有建立在视觉演播室。

-好的-注意我是如何得到这一点, 很快我说, ASP net 四。

是的, 它给了你 (相声) 输入四, 而不是。

它得到了, 这是真的很好, 对不对？

所以我可以快速地填写这些表格, 我不必担心服务器端会发生这种情况。

好的, 那么我们就说一个标签, 这也是一个标签。

客户。

客户的名字, 这是好的, 然后我们会说, 给你另一个 div, 然后在那里我们将有一个输入。

为客户命名。

然后你可以再做一次验证, 对吗？

是的, 我会做一些, 但我可以做验证两种不同的方式。

我可以做验证总结, 或者我们可以这样做, 这是很好的。

关键的区别是什么？

这一条是, 你完全控制它的样子。

你可以把它放在任何地方上下。

好。这只是一个项目符号列表, 是一个卷起来。

好。所有的东西。

完全由你来做你想做的事情。

这都是表格里面的, 对吧？

所以你想保存它, 对吗？

是的, 我们需要一个保存按钮。

-因此, 我们会把我们的按钮在底部, 这只是一个常规的老提交, 没有看中它。

它会说拯救。

我们要把它装起来保存起来

并进行验证。

我们做了很好的事情, 我们只是想确认一下, 就像你在后端说的那样, 我们做的是对的。

所以, 实际上, 让我们来做这个。

让我们先运行它, 然后再试一次, 因为现在我们还没有连接任何东西。

我们还没有从数据库中更新的数据库中得到它。

但我希望链接到至少工作。

是的。因为现在有一个编辑页面。

如果没有, 也许我忘了什么。

好的, 看那边的角落。

-好吧-我很难做到这一点。

我可以采取截图, 但我不能真正采取截图。

-让我们这样做-我们将采取一个截图工具。

给它延迟两秒钟。

你这么快？我是。

所以 Edit/1 的权利, 所以路线得到了事实, 它是在编辑。

然后你在上面加上了那个 ID。

所以这是很好的, 因为我们不必硬编码的链接看起来像。

这真的很重要。

我们说, 给我一个链接, 带我到这里。

我们没有说让我成为一个类似这样的链接。

不。

那很好。

如果我们以后改变我们的东西, 那么它会改变我们, 这是很好的。

所以在这里, 如果我点击它, 我认为它只是做, 是的, 没有。

所以就像, 厄啊, 我没有任何东西在那里。

它还不知道客户, 因为我们有捆绑, 但我们从来没有加载客户。

所以, 让我们再去做我们的东西, 我们将有我们的行动结果, 在这里我们要说, OnGet, 当然, int id, 这将被自动传递, 因为我们设置我们的路线, 这是很好的。

默认情况下, 将返回到页面, 但在这里我们会说, 客户, 上面的一个去从数据库中获取它。

找到它, 好, 是的, 所以 FindAsync, 一种标准的东西, 你可以通过更复杂的查询, 并获得其他方式。

如果是空的, 就吓坏了。

权利?是的.如果 (客户 == null), 我不知道, 让我们把它们放回索引。

是顾客对吧？

是的, 对不起, 客户。

好的, RedirectToPage ("/指数");很多打字, 但我们不想隐瞒任何你。

保持100。

我们绝对保持它 100, 所以这应该为我们提供一个形式, 与客户在其中。

让我们看看它是否有, 因为我们添加了绑定属性, 你说, 你叫它什么？

幸存的旅程。

幸存的旅程。

你看过那部有趣的电影真的挺好的。

别告诉我最后会发生什么？

所以我。

我不想知道。

好的, 然后我点击编辑, 然后它的工作。

完全。对。

如果你改变它会怎么样？

如果我改变它, 也许没什么不对, 因为我们没有我们的帖子。

完全。

没错所以我们得到了

但我们没有我们的职位。

你可以复印一份

是的, 我认为有一种方法可以快速地将整个事情联系起来, 但是我们会说, OnPostAsync 好了, 我们将会重定向。

到索引页吗？

到索引页, 确切地说。

-好的-我们该怎么办？

嗯, 我们已经得到了模型状态的有效问题。

是的, 如果不是模型。

不是 ModelState IsValid

是的, 我们希望它返回到页面。

-好啊, 页面

看, 如果你试图打字太快, 以打动人, 它只是最终使你看起来很傻。

好了, 现在这个是有趣的一个。

因为您希望将其附加到数据库。

是的, 所以我们现在要做的是, 我们正在修改数据库中所有准备就绪的内容。

因此, 我们要做的是让这个客户, 我们是反复编辑。

所以它是在一个购物车状态。

将该客户附加到数据库中它的状态, 我们将标记为已修改。

这一点。

它不应该在那里, 是的。

添加 using 语句, 我们开始了。

现在它变成蓝色了, 好吧。

现在, 我们不知道它是否会起作用, 因为其他人可以同时编辑。

确切地说, 所以你想尝试和捕捉。

可以尝试, 也许它会工作, 也许它不会。

而我们要抓住的例外, 叫做 aDbUpdateConcurrencyException。

所以万一有人在做

如果有人同时在里面--正是它所说的。

到底是什么。那你要等着改变了吗？

继续 ' 等待 ', 并说 SaveChangesAsync, 并可能会工作正常。

如果它没有-我们将不得不抛出一个例外？

现在对于正确的方法有不同的争论, 但是现在我要去说, 客户, 这有点酷。

客户 Id, 看我如何在字符串中获取智能感知？

对于并发异常, 我们可以做任何想做的事情, 甚至可能将其作为内部异常传递。

但事实上, 这是一个好主意, 我们将通过这一点, 在旅途中。

我们想给某人一个消息, 说发生了坏事。

好吧, 应该是, 我想我们总是要创造。

-我们做-我们做了创建。

-让我们去看看-我认为创建是一个帖子。

-是-读取是 for 循环。

删除也是一个帖子, 但与删除边, 沿为骑。

-所以, 创建, 丹打破点从以前。

是的.我会把那些-我想你还有, 好吧。

继续, 如果我们有更多的话, 我们会碰到他们。

-漂亮的裤子-碧昂斯。

-这是一个很好的点编辑

卡特。

-是的-别弄歪了。

-删除其他不值得的人-所以

-看, 它有效-它确实有效。

你去吧, 照顾好生意, 冷静。

-所以, 让我们考虑一下-所以, 这是非常甜蜜的。

-这是-如果我们回去, 只是一种审查特别是, 这一点, 我们已经得到了我们的编辑。

我们没有看到的路线 id

-我们现在在哪里进行接触？

对不起, 这是索引。

-好吧？

所以在这里我们得到了一个编辑。

我想指出它在代码中的外观, 然后将它与代码中的最终外观进行比较, 对不对？

当它使它一路回到浏览器。

看到?-它在。

所以, 这是从, 这似乎是多一点。

你可能会问自己, 为什么你不只是硬编码呢？

但是路线改变了, 书页变了, 事情都转过来了。

现在, 这个在这里有点有趣, 因为你可能有多个按钮在页面上做不同的东西。

然后, 您可以给他们一个处理程序名。对？

我可以删除。

我可以有大胆的脸碧昂斯, 我可以有所有的帽子, 对不对？

我们可以拥有任何东西。

你不限于一个按钮。

一个提交按钮可以有, 你可以有多个提交, 仍然通过数字, 像在这种情况下 id。

-是的-这是一个符号。

-是-多个处理程序, 删除, 促进任何。

-保存-完全保存

-好-和什么是酷的, 那就是, 如果我们看看后面的字删除这个词。

所以, 我认为你甚至可以像 "foo" 异步, 或任何, 只要它排队, 因为你说的是开机自检, 然后是一些处理程序。

-很酷吧？

很酷。和处理程序是字面上你可以说, 让我停止我们的调试在这里。

你要尝尝 foo 的吗？

对, 我可以做任何事, 这无关紧要。

这个词完全由你来做。

所以我不需要测试。

-你只是相信我-你不相信我？

-好的, 好的-好的, 让我们测试一下。

-让我们测试它-这给你很多的灵活性与按钮, 所以我说, 在那里的 foo。

-我过去-我们说 foo。

然后就来了

那么, 这是加载？

你想说什么？

不不我相信你

-相信你吗？是的.

那很好, 我来拿。

我们去加人吧。

-好-那是 foo。

f oo 是如何知道它是删除的？

因为这并不重要, 它被命名为 Foo。

它只是一个处理程序名。

如果我们确认是我通过的呢？

-不-这是创建, 对不起。

你去那里有一个删除。

好吧, 看它说, 处理程序等于 foo。

-是的, 好的, 是的-然后, 我只是碰巧命名这个处理者 foo 也。

-是, 是的-所以重点是, 它排队。

这就是为什么你可以有无限的动词。

然后在这一点上, 它只是做了事情, 并从数据库中删除它。

酷?酷.因此, 我们看到了许多不同的处理程序, 如获取和发布, 以及自定义处理程序 (如删除)。

-是的-我们看到了一些标记助手, 它将为我们生成按钮和链接。

-我们看到了版面页面-我们看到了验证。

我们看到了验证的摘要和个人。

-是的-有很多关于路由和一点点细节的一点点。

我们看到路由, 然后具体地说, 实际上, 我们可以指出关于路由的一个重要的事情。

如果单击 "编辑", 则会再次关闭应用程序。

你说的 ID: int

-是-在哪里 int 是一个数字, 正确的？

这将是有趣的。

所以只要确认一下, 如果我们把提交查询, 编辑, 她是一个。

放入一个不是 int 的 ID。

你应该得到一个 [串扰] 你只是得到一个 404, 你没有得到500。

这不是一个错误。

这是一个不存在的路线。

我们没有一个需要字符串的编辑。

所以, 这是另一个非常非常重要的事情, 要指出的路由, 为什么这一点上有这么重要？

然后很快, 在中间部分, 我们将学习更多关于 web api, 和 url, 以及混合和匹配页面, 是的。

我们可以休息一下再回来做点记录吗？

是的, 我们会