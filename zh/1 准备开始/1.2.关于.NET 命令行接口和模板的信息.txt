所以让我们构建我们的第一个程序，Scott你信任我吗?
> >当然了
> >好吧。> >好了，那么
我安装. net core SDK,我只需要下载它，还有
我已经安装好了程序。
> >你也需要做
的这些东西,我们已经做过了。
> >但我怎么知道它工作吗?
> >好的,打开你的命令行,
> >好
> > 输入dotnet -version
哦~你已经做了呀。
> >我刚才直接输入了dotnet
> >这说明dotnet已经生效了
否则是会报错的
> >这是一个很好的开始
事实上我可以输入 where dotnet,它会告诉我
dotnet 被安装到哪里了
> >但是只有磁盘的位置
你看到它在编程文件里。
>> Okay.
>> Okay? >> 那么
让我们确保您使用了正确的版本。
是2.0的版本
输入 dotnet --version
>> Okay.
>> Okay. >> 我们会得到2.0.2
你会得到2.0.X的版本
>> Yeah.
> >这是一个补丁版本。
就像一个。
> >像是会在新版本中发布一些小的变化
> >嗯嗯。> >但2.0这部分是不会变的。
>> Okay.
> >好的,我们已经知道了,我还能做什么?
> >有些人会想知道
当我们运行 dotnet help时，因为这对于
想要知道在某些地方可能会发生什么问题的的人
是很有帮助的
所以如果你输入dotnet help，让我们看看会发生什么。
> >对,所以我可以输入dotnet——help,
所有的这些命令都是帮助提示
通过整个过程的帮助。
>> Everything.
通过整个过程的帮助。
>> 每件事
它能告诉你,如果你想做一些新的事情,
新建一个工程，运行它
这是一个很好的有所有你需要知道的所有内容的说明书
您可以使用.NET命令
> >现在有很多部分可能还没有完善
其中一些可能会让人困惑。
但我们要关注基础知识
我觉得我们开始的时候可能只会需要
编写、运行或者编译
> >这就是我们目前要做的
>> For this module.
> >这就是我们目前要做的
> >这个模块里
> >这个模块里
>> For this module.
> >这就是我们目前要做的
> >这个模块里
> >这就是我们目前要做的
> >好吧。> >一个很酷的东西
尤其是现在dotnet 2.0在命令行中
的环境下有着数量可观的模板
> >好的,模板是什么?
> >模板,我认为它就像一个开始的环境
给你一个形式的东西
结构,最终帮助你编写代码。
所以,这有点像类似于
你使用PowerPoint幻灯片
有不同的模板,让你的风格和指导方针。
想想吧，作为代码的幻灯片。
> >好的,所以我们有控制台应用程序,和web应用程序
测试应用程序,很多不同的类型。
> >不同的各种方式,我们会看一看。
所以我们应该去看看dotnet能带给我们什么样的程序?
> >好的,让我们看看
> >让我们看看dotnet new
这是我们常用的类型。
> > Dotnet new,好的,我得到一个看起来很赞的列表。
事实上有些东西是滚动的
这些也是dotnet new的选项
注意，我们再次看到help，而这与刚才的help不同
这是一个很有趣的事情，简单地说
当我键入dotnet help时，我会得到最高级别的帮助
当我输入dotnet new --help时，我会得到关于new命令的帮助。
> >这实际上是第一次。
我所做的这一切,但我从来没有注意到。
> >那不是很好吗?
哇，有趣的是如果我输入dotnet new
我能得到的帮助模板。
> >你能运行嘛,我们可以看一下?
这是一个控制台应用程序模板。
这是专门为控制台提供帮助的选项。
为什么可以这样用呢,假设我去
获取一个第三方的模板,
我从别的地方得到一个模板,这个模板
自己的很多复杂的选择和开关。
那么 dotnet --help 是全局的help.
Dotnet new --help 是new命令的help
然后如果我来 --help特定的模板名称,
我会得到对此模板的帮助。
这很酷呢
> >这是很酷。
>> All right.
> >这是很酷。
>> 好的
>> All right.
> >我发现这跟文学记录很相似呢
>> 好的
> >我发现这跟文学记录很相似呢
>> See and
> >我发现这跟文学记录很相似呢
>> 观察一下
>> See and
我要向你学习，你也向我学习
>> 观察一下
我要向你学习，你也向我学习
我们会有一段美好的时光
所以我回到你告诉我的Dotnet new
我看到一个模板列表，和名字简写的列表
> >好多名字,还可以看到不同的
支持的语言。
> >嗯嗯,在这种情况下,c#也在支持的语言中,
这说明它是被“钦定”的。
但是我们也可以使用f#,这是一个优雅的函数式编程语言
或者VB,这对初学者来说是一个很好的语言尝试,对吧?
好,让我们创建一个,你想要创建一个文件夹吗？
> >是啊,是的,我们先创建一个文件夹。
> > Myconsoleapp。
好吧。
我这里有一个空的文件夹。
> >确切地说
因为我们要建立一个联系dotnet的新控制台。
>> Dotnet new console.
和一个控制台应用程序,只是文本模式。
>> 没错
当输入完，让我们看看会发生什么
dotnet new console 完成
> >模板已经创建成功了。
> >成功。
> >然后运行了 dotnet restore
我在刚刚的时候
输入了dotnet new ，我不得不需要恢复一些东西
恢复的是什么?
> >那么,它是
恢复的是一些包,我们将来看一下
里面是什么
> >这些库里的包文件
这些依赖关系,它所需要的东西。
> >是一个控制台应用程序。
> >然后生成了一个文件
还告诉了我,用了多长时间去进行。
所以我们有一个Program.cs文件，还有一个cs proj,或c#项目。
> > c#项目里面有我们需要的包
> >这些就是我们引用包,
所以让我们来看看
我只是想说Type。
>> Okay
因为这是一个非常小的文件的输出。
> >真小。
> >它显示，Microsoft.NET.SDK
软件开发工具包。
这是一个可执行的.NET 2.0 app
它没有任何超越基础的依赖
它有一些依赖项。
输出到控制台之类的,但是
大多数情况下,它包括SDK
我们没有额外的引用。
>> Okay. >> Okay.
所以,接下来我们该怎么做,
我们能够看到他的代码吗？
>> Yeah, so let's run it, okay.
我们能够看到他的代码吗？
> >是啊,让我们来运行它。
> >是啊,让我们来运行它。
>> Yeah, so let's run it, okay.
> >这是代码,Hello World。
> >是啊,让我们来运行它。
> >这是代码,Hello World。
很直接。
做一个快速运行。
是,好吗?是的,听起来不错。
> >好的,现在在这里需要一点时间
一秒，两秒，三···
你知道我在干了什么吗?
为什么需要3秒说“hello world”?
> >这是第一次你运行应用程序。
> >需要时间去编译> >是的。
> >我这样在命令行做
我们不想花很多时间在命令行上
>> No.
所以我们要看代码?
> >我们将使用Visual Studio Code
值得说明的是如果我下面放大
可以看到我有一个Windows IDE：Visual Studio 2017
以及我有 新的跨平台IDE Visual Studio Code
如果你在Mac上它是一个文本编辑器 也是一个代码编辑器。
> >是啊。> >它有很少的组成部分
和很轻的量级
他可以跨平台，因此我们使用它
现在我要输入code. 在文件夹的路径下
> >,它会在这编译,对的？
> >是啊,我现在将向你展示。
我们将继续运行。
然后在Visual Studio Code中调用命令
将其添加到路径。
这就是运行代码后将要做的事情
这已经不是第一次了。
我们会继续运行。
Okay, Visual Studio code打开了，接下来
有趣的是 Visual Studio Code会弹出一个警告,嘿,
我需要获取一些没有的东西
你想让我获取他们吗?
然后它有一个“是”和“不是”。
看一下左边这一列 出现了bin和obj文件夹
点击是的,但是你要看着左边一点呀。
> >在这里。
>> 看到了吗?
所以,这只些东西.vscode是IDE为自己创建的。
这不是关于c#,只是对于.vscode。
为了能够启动这个程序,
这些只是配置文件。
所以你不需要担心这些。
但关于这些你可能想说
> >如果有人这样做了
在第一次的时候,问你yse的时候,如果不要碰的话?
> >不要碰,别担心。
你需要做的。
你要记得你的项目路径
如果你摁 Ctrl+P.
我觉得如果用的Mac可能是需要摁Cmd+P
>> [LAUGH] 就是 Cmd+P.
> > Cmd + P,确实是这个吗?
>> Yeah.
> > Cmd + P,确实是这个吗?
>> Yeah.
> >有很多快捷键,能够唤出这个提示盘
我只是记得P可以唤出来
然后，该怎么说呢?
这是一个非常好的标志
> >是啊。> >我觉得要输入
添加路径吗?
在哪里?
在这里,有很多命令
其中一个将代码添加到路径。
现在也许是自动发生的,但
我这样做一次。
在这里你也可以看到其他喜欢你的选择
颜色主题和默认的shell之类的东西。
> >是啊,VSCode网站有很多好的文档
关于在编辑器中的很多
细碎的内容说明
> >是啊,会让它非常容易编辑、修改,
改变颜色,行为。
所以,随意探索。
这就超出了我们要宣讲的范围了
不过,我要双击Program.cs,
我要放大一点。
我们还有我们的应用程序在这呢！
> >我觉得大家可能对
Console.WriteLine很熟悉哈
把你的名字协写上
再运行一下
先删除分号，看看到你得到什么样的错误。
这真是一个熟悉语言的好方法。
> >现在我可以做出改变,点击Ctrl + S。
我可以Alt + Tab切回到这里来,再次输入 dotnet run
它将编译,停了下来
然后它运行,你好斯科特说。
然后我可以Alt + Tab回来这里,但是
可能大家都知道了
> >是啊,所以在Visual Studio Code里可以
直接执行运行吗?
> >请记住我在这里的时候,
其中一个选项是终端:选择默认的Shell。
>> Yeah.
> >摁着Ctrl，我觉得这叫做波浪号吧。
> >啊，你是说弯弯曲曲的东西?
> >就是你说的这个> >是啊,这是一个波浪号。
> > > >[haha]我总是叫它
弯弯曲曲地的东西,直到我在一个文档看到它。
> >我认为我们的西班牙朋友不会这么称呼它。
但，还真是！- > >[笑]
>> 性格太直爽了
在顶部
>> Yeah. >>那么 摁着 Ctrl+~
当然你可以- > >选择您的shell。
> >选择你自己的方式,你可以选择你自己的shell。
在这种情况下我用PowerShell
现在我会用一些命令行提示符来
表示Visual Studio Code 自身.
所以现在,不必再去Alt + Tab
这样做,我能做的一切都从这里开始,好吗?
所以让我们“你好斯科特”,okey?
这是一种操作的方法,
但是我想做一些交互式的调试。
来做一些更复杂的
那么, 我们能做些什么呢?
>> Yeah.
> >我要移动鼠标到左边
你看到这个红点。
> >是,这是一个断点。
> >是啊,我点击它,来打断他。
然后我要去点击Debug。
> >嗯,很直观。
> >我是这样感觉的,因为会有错误,
这是一个事实。
[笑]> > > >在这个文本框这
选择 .NET Core launch,
它知道我们要干什么，因为我们已经配置了
>> 选择了 launch.
> >如果我不答应,我将无法进行调试。
好,Visual Studio Code可以使用其他语言,
像Node和Python之类
文件的不同这取决于
你使用的语言。
好的,我会开始调试。
然后它会去编译它。
运行中，运行中，然后他就会跑起来啦
现在我们的应用程序在显示
Hello World之前就会停掉
程序会直接停在这里
我可以看到不同的变量。
我可以看到如果有任何局部变量。
我们就可以很方便的查看。
让我们停一下
让我们写上 var i = "Maria", var j = 9.
再次点击调试。
看到了吗?
>> Yeah
我们在调试中可以看到我们的调用堆栈
这提供了一个完整的互动体验。
> >很丰富
>> 确实是很丰富的, okay,
考虑到这是一个跨平台的代码编辑器,
这是非常神奇的
说明一下哈，这不仅能给我们
提示,如果我们看这里
比如它会提示有一些错误,你使用一个变量
但是你却从没用它作过什么？
但有时这种事也时可以被允许,这个变量的属性
这是什么,应该怎么命名?
> >灯泡提示
>> 灯泡提示
所以我可以去说,我想获取方法或
删除该变量,对吧?
所以你可以进行小的重构。
它会说,嗯,这确实是没有使用。
这条线没有理由存在。
我可以点击,它会解决它。
在这种情况下,它将通过删除这个变量解决它。
>> [LAUGH] >> Sorry.
> >听起来,而有意为之。
> >那不是故意的。
[笑]> > > >好的,
我们将使用一会儿Visual Studio Code
然后 我们会适当的结束Visual Studio这部分。
> >是啊。> >还有更多的
特性呢,对吧?
所以给你的感觉上,欸~,我很抱歉。
我们还没有谈论智能感知呢
> >是的,让我们添加一个行,因为第一行
你做的是输入和输出,对吧?
> >嗯,所以WriteLine是我们的输出。
> >是啊。> >我们们需要打上Console
你会发现它能够出现 - > >Console。
> >给我们智能感知。
> >不仅如此,它能够帮助初学者
显示语句是什么意思。
> >是啊,这有点看起来像是
文档,对吧
它会打出Console。,看到这个。
你说读一行,这是这里的文档
它会告诉你程序可能出错。
从输入ReadLine,读取下一个字符
下一个字符流
是的,注意这里
分号,就像这样,很酷
然后我会从命令行这样做
让dotnet 跑起来
一秒,两秒,3,
现在停了下来因为它在等我输入。
> >,它做了
> >好的,所以你有智能感知功能,
你有调试功能。
所有的这些，当然,是在这里使用的。
而且非常简单
看到一些内部的操作是很友好的。
当我们点击这里,记住这个文本,
.NET Core Launch出现的这个配置文件
> >真的，我给你展示这个的原因是很重要的
要明白这并不是魔术。
我们没有对你隐藏任何东西,对吧?
你未必被这些东西感冒啦,但是
明白一些关于这些的事是很好的
像这个调试器的运作只是依据一个文本文件。
这里会运行我们的程序。
当我们执行 dotnet run,我们的程序会在这里准备好
myconsoleapp.dll.
它会去调用。
如果我们想要
获得调试,还有运行应用程序的能力。
就需要连接到它
一旦完成，就可以运行调试
这一切在Visual Studio Code都是可能的
> >我认为值得向观众展示的地方
就是
了解有关Visual Studio Code更多的事情。
> >Visual Studio Code可以在code.visualstudio.com中访问
这里有一个非常丰富的插件
扩展商店
有很多东西。
我们可以为c#和Visual Studio,或
Python或c++或Go或不同的语言,还有
他们的文档也是很丰富的
有很多不同的东西可以学习。
你可以改变风格,改变行为。
你可以把它与你的Git或DSTS这种源代码控制相互结合
> >您可以创建您自己的扩展吗?
> >当然,这里是一个整体部分
没错,可以自己开发拓展插件
> >我想我最喜欢的扩展需要
Slides的扩展。
你见过那个吗?
> >Slides?我喜欢的一个
时髦的图标。
> >[笑]> >这能给你一个
有趣的图标- > >我认为他们已经移走了一些
这些体验现在融入了Visual Studio。
> >这些所有
最终扩展成为一个Visual Studio本身的一部分。
所以你觉得怎么样,Slides?
> >是啊,所以,你可以写下你的Slides。
> >哪里去了?
> >我不知道。
>> Uh-oh.
我喜欢的是Git Lens,G-I-T-L-E-N-S。
好奇怪呀。
今天的搜索这是不工作了嘛？
其实Git Lens在中间啦
Git Lens 非常非常好用的的！
让你知道什么时候，谁改动了你的代码
>> Okay. 那么
类似于如何在VisualStudio中这样做
在那里你可以真正地观察每个人
> >是的，就像责备一样，如果你想知道是谁的错
。所以两天前你可以看到这是埃里克的错
他改变了这一点
> >是啊,我也看到你的名字了
我在开玩笑。
我没有。
我刚才说的那个是显示的
> >显示?
> >如果任何人透露JS,实际上它让你
在浏览器中会有一个slide的记录。
> >是啊,所以你有编辑,获取拓展插件
做各种事的能力
> >是的
> >并不是有理由 必须要用VS Code
但是如果你今天像我们一样刚刚开始
Visual Studio Code将是你
编辑和调试体验的最佳选择
> >是的
> >好吧。> >好吧。
> >我们将一个短暂的休息,我们马上就回来。
