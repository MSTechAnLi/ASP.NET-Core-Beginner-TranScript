让我们构建我们的第一个程序， Scott 你信任我吗
当然了
那么我已经安装了 .NET Core SDK ，我只需要下载它，还有我已经安装好了程序
你也应完成了这些步骤
我们在过去也做过这些
但我怎么知道它是否起作用呢
好的，打开你的命令行
输入 dotnet --version
哦，你已经完成了
我刚才直接输入了 dotnet
这说明 dotnet 已经生效了
否则是会报错的
这是一个很好的开始
事实上我可以输入 where dotnet
它不光会告诉我 dotnet 是否存在，还会告诉我它被安装到哪里了
但是它到底在磁盘什么位置
你可以在 Program Files 中找到它
让我们来确认一下你使用了正确的版本
我们需要 2.0 的版本
输入 dotnet --version
然后，我们会得到 2.0.2
你会得到 2.0.X 的版本
这是一个补丁版本
就像是在新版本中发生的一些小的变化
嗯嗯 但 2.0 这部分是不会变的
我们已经完成了这些，接下来呢？
让我们来试下 dotnet --help
这个指令对解答大家的疑问
是很有帮助的
所以如果你输入 dotnet --help ，让我们看看会发生什么
好的，我输入了 dotnet --help
所有的这些命令都是帮助提示
通过整个过程的帮助
每件事
当你想新建项目，还原依赖包，或运行项目时，它能告诉你该怎么做
在你使用 dotnet 命令时碰到的任何问题
都可以在这里找到答案
现在有一些部分可能还不够完善
其中一些可能会让人困惑
但我们要需关注基础用法就够了
而且我觉得我们开始的时候只需用到
编辑、运行或者编译
这就是我们目前要做的
这个模块里
这就是我们目前要做的
好吧一个很酷的东西
尤其是现在 dotnet 2.0 在命令行中
有着数量可观的模板
好的，模板是什么
模板，我认为它就像一个初始的环境
给你一定的格式或结构
最终用来帮助你编写代码
所以，这有点像类似于
你使用 PowerPoint 幻灯片
有不同的模板，模板有不同的风格和向导
就把它当作你代码的 PowerPoint
好的，所以我们有控制台应用程序，和 Web 应用程序
测试应用，等很多不同的类型
对各种不同的类型，我们都会尝试一下
那我们应该去看看 dotnet 能带给我们什么样的程序
好的，让我们看看
让我们看看 dotnet new
这是我们经常会用到的类型
dotnet new ，好的，我得到一个看起来很赞的列表
事实上，这还可以滚动
这些是 dotnet new 的选项
注意，我们再次看到 help ，而这与刚才的 help 不同
这是一个很有趣的事情，简单地说
当我键入 dotnet --help 时，我会得到最顶层的帮助信息
当我输入 dotnet new --help 时，我会得到关于 new 命令的帮助信息
这真是我第一次知道
我一直以来都使用这个命令，但从来没有注意过这些
那不是很好吗
哇，有趣的是如果我输入 dotnet new
我能得到的帮助模板
你能运行嘛，我们可以看一下
这是一个控制台应用程序模板
这是专门为控制台提供帮助的选项
为什么这个选项非常有用呢
假设我使用一个第三方的模板
是我从其他地方得到的
而这个模板本身就有复杂的选项和选择
那么 dotnet --help 是顶层的帮助指令
dotnet new --help 是 new 命令的帮助指令
然后如果我在特定的模板名后再加上 --help
那我会得到关于此模板的帮助信息
这很酷呢
这是很酷
我发现这跟文学记录很相似呢
我要向你学习，你也向我学习
我们会有一段美好的时光
所以回到你告诉我的 dotnet new
我看到一个模板列表，和对应的缩写
这里包括了模板名，还有所支持语言的不同
嗯嗯，比如说这里， C# 就在支持的语言中
而且是被钦定为默认选项
但我们也可以使用 F# ，这是一个优雅的函数式编程语言
或者 VB ，这种语言对初学者尝试会更友好，对吧？
好，让我们创建一个，你想创建一个文件夹吗？
嗯，可以啊，我们先创建一个文件夹
名为 Myconsoleapp
好的
我这里有一个空的文件夹
确切地说
因为我们要建立一个联系， dotnet new console
dotnet new console
控制台应用就是我们这边所使用的类型
没错
当输入完，让我们看看会发生什么
dotnet new console 完成
模板已经创建成功了
很好
然后运行了 dotnet restore
在此之前，当我输完 dotnet new 我还必须再还原一次
需要还原什么
需要还原一些包，让我们来看一下吧
这里面是什么
在这些包中包括了对应的库，依赖项，已经它所需的东西
来构成一个控制台应用程序
然后生成了一个文件，还告诉了我执行了多少毫秒
我们有一个 Program.cs 文件，还有一个 csproj ，或者叫做 C# 项目文件
C# 项目文件里面有我们需要的包
这些就是我们引用包
所以让我们来看看
我们只需输入 type
好的
这就是输出，因为这只是个很小的文件
真挺小的
它显示该项目使用了 .NET SDK
软件开发工具包
这是一个可执行的 .NET Core 2.0 应用
而且它除了基础库之外没有别的依赖项
它是有一些类似用于向控制台输出的依赖项
但是大多数情况下，它已经包含在 SDK 之中了
我们不需要额外的引用
好的 那很好
所以，接下来我们该怎么做
我们能够看到他的代码吗
这就是代码， Hello World
很直接
运行一下试试
这样好吗? 可以，听起来不错
好的，现在在这里需要一点时间
一秒，两秒，三
你知道我在干了什么吗
为什么需要3秒才出现 hello world ？
因为这是第一次你运行应用程序
需要时间去编译 是的
我再命令行这样做
我们不想花很多时间在命令行上
好的
我们再来看下代码
我们将使用 Visual Studio Code
值得说明的是如果我把下面放大
可以看到我有一个 Windows 下的 IDE ， Visual Studio 2017
以及新的跨平台 IDE ， Visual Studio Code
如果你在 Mac 上，它是一个文本编辑器，也是一个代码编辑器
是啊 它包含的东西虽然少一些
但很轻量
还可以跨平台，因此我们将使用它作为编辑器
现在我要输入 code . 在文件夹的路径下
它会在这编译，对的
是啊，我现在将向你展示
我们将继续运行
然后在 Visual Studio Code 中调用命令
将其添加到路径
所以这是你第一次运行代码后将要做的事情
我们会继续运行
好的， Visual Studio Code 打开了，接下来
有趣的是 Visual Studio Code 会弹出一个警告
嘿，我需要获取一些没有的东西
你想让我获取他们吗
然后它有 yes 和 no 的选项
看一下左边这一列，出现了 bin 和 obj 文件夹
我会点击 yes ，但是你要看着左边列
在这里
看到了吗
这些东西，比如 .vscode 是 Visual Studio Code 为自己创建的
这不是关于 C# ，只是对于 .vscode
为了能够启动这个程序
这些只是配置文件
所以你不需要担心这些
但关于这些你只需选 yes 就可以了
如果有人这样做了在第一次的时候，问你 yse 的时候，如果没有选
不要选?别担心
你需要做的
你要记得你的项目路径
如果你摁 Ctrl+P
我觉得如果用的 Mac 可能是需要摁 Cmd+P
就是 Cmd+P
Cmd+P ，确实是这个吗
Cmd+P ，确实是这个吗? 是的
有很多快捷键，能够唤出这个提示盘
我只是记得P可以唤出来
然后，该怎么说呢
这是一个非常好的标志
是啊我觉得要输入
是 add path 吗
在哪里
在这里有很多命令
其中一个可以将代码添加到路径
现在也许是自动发生的，但让我再试一下
在这里你也可以看到其他喜欢你的选择
颜色主题和默认的 shell 之类的东西
是啊， VS Code 网站有很多好的文档
关于在编辑器中的很多
细碎的内容说明
是啊，会让它非常容易编辑、修改
改变颜色，行为
所以，随意探索
这就超出了我们要讲的范围了
不过，我要双击 Program.cs
我要放大一点
我们还有我们的应用程序在这呢
我觉得大家可能对
Console.WriteLine 很熟悉
把你的名字写上
再运行一下
先删除分号，看看到你得到什么样的错误
这真是一个熟悉语言的好方法
现在我可以做出改变，按下 Ctrl+S
我可以 Alt+Tab 切回到这里来，再次输入 dotnet run
它将编译，停了下来
然后它运行，显示 "Hello Scott"
然后我可以 Alt+Tab 回来这里，但是
可能大家都知道了
是啊，所以在 Visual Studio Code 里可以
直接执行运行吗
请记住我在这里的时候
其中一个选项是终端:选择默认的 Shell
是的
摁着 Ctrl ，我觉得这叫做波浪号吧
啊，你是说弯弯曲曲的东西
就是你说的这个 是啊，这是一个波浪号
我总是叫它
弯弯曲曲地的东西，直到我在一个文档看到它
我认为我们的西班牙朋友不会这么称呼它
但，还真是
性格太直爽了
在顶部
好的吧，那么，按下 Ctrl+~
当然你可以 选择您的 shell
选择你自己的方式，你可以选择你自己的 shell
在这种情况下我用 PowerShell
实际上，现在我在 Visual Studio Code 自带的命令行窗口中
所以现在，不必再去 Alt+Tab
这样做，我能做的一切都从这里开始，是吗
所以让我们 "Hello Scott" ，好吗
这是一种操作的方法
但是我想做一些交互式的调试
来做一些更复杂的
那么， 我们能做些什么呢
好的
我要移动鼠标到左边
你看到这个红点
是，这是一个断点
是啊，我点击它来中断运行
然后我要去点击 Debug
很棒，很直观
我觉得可能会有错误
我认为一定有
在这个文本框这
选择 .NET Core launch
它知道我们要干什么，因为我们已经配置了
选择 launch
如果我不答应，我将无法进行调试
好， Visual Studio Code 可以使用其他语言
像 Node 和 Python 之类
文件的不同这取决于
你使用的语言
好的，我会开始调试
然后它会去编译它
稍等片刻，然后他就在运行啦
现在我们的应用程序在显示
Hello World 之前就会停掉
程序会直接停在这里
我可以看到不同的变量
我可以看到如果有任何局部变量
我们就可以很方便的查看
让我们停一下
让我们写上 var i = "Maria"; var j = 9;
再次点击调试
看到了吗
是的
我们在调试中可以看到我们的调用堆栈
这提供了一个完整的互动体验
很丰富
确实是很丰富的
考虑到这是一个跨平台的代码编辑器
这是非常神奇的
说明一下哈，这不仅能给我们提示
如果我们看这里
比如它会提示有一些错误，你使用一个变量
但是你却从没用它作过什么
但有时这种事也时可以被允许，这个变量的属性
这是什么，应该怎么命名
灯泡提示
灯泡提示
所以我可以去说，我想获取方法或
删除该变量，对吧
所以你可以进行一些微小的重构
它会说，这确实是没有使用
这条线没有理由存在
我可以点击，它会解决它
在这种情况下，它将通过删除这个变量解决它
抱歉
听起来像有意为之
那不是故意的
好的
我们将使用一会儿 Visual Studio Code
然后，我们会适当的结束 Visual Studio 这部分
是啊，还有更多的特性呢，对吧
所以给你的感觉上，我很抱歉
我们还没有谈论智能感知呢
是的，让我们添加一个行，因为第一行
你做的是输入和输出，对吧
嗯，所以 WriteLine 是我们的输出
我们只需要打上 Console
你会发现它能够出现 Console
给我们智能感知
不仅如此，它能够帮助初学者
显示这语句是什么意思
是啊，这有点看起来像是文档，对吧
输入 Console. ，看这就很棒
然后输入 ReadLine ，这边就是它的文档
它会告诉你程序可能出错
ReadLine ，从输入流中读取下一个字符
是的，注意这里的分号
然后我会从命令行这样做
让 dotnet 跑起来
一秒，两秒，三···
现在停了下来因为它在等我输入
确实这样
好的，所以你有智能感知功能
有调试功能
所有的这些，当然，是在这里使用的
而且非常简单
可以看到这些内部的操作是很友好的
当我们点击这里，记住这个文本
.NET Core Launch 出现的这个配置文件
真的，我给你展示这个的原因是很重要的
要明白这并不是魔术
我们没有对你隐藏任何东西，对吧
你未必对这些东西感冒啦
但是明白一些关于这些的事是很好的
像这个调试器的运作只是依据一个文本文件
这里会运行我们的程序
当我们执行 dotnet run ，我们的程序会在这里准备好
myconsoleapp.dll
它会去调用
如果我们想要
获得调试，还有运行应用程序的能力
就需要连接到它
一旦完成，就可以运行调试
这一切在 Visual Studio Code 都是可能的
我认为值得向观众展示的地方
就是了解有关 Visual Studio Code 更多的事情
Visual Studio Code 可以在 code.visualstudio.com 中访问
这里有一个非常丰富的插件
扩展商店
有很多东西
我们可以为 C# 和 Visual Studio
或者 Python 或 c++ 或 Go 或不同的语言
他们的文档也是很丰富的
有很多有趣的东西可以学习
你可以改变样式，改变行为
你可以把它与你的 Git 或 VSTS 这种源代码控制相互结合
您可以创建您自己的扩展吗
当然，这里是一个整体部分
没错，可以自己开发拓展插件
我想我最喜欢的扩展就是
Slides
你见过那个吗
Slides ? 我喜欢的一个
时髦的图标
这能给你一个
有趣的图标 我认为他们已经移走了一些
这些体验现在融入了 Visual Studio
这些所有
最终扩展成为一个 Visual Studio 本身的一部分
所以你觉得怎么样， Slides
是啊，所以，你可以写下你的 Slides
哪里去了
我不知道
哦好吧
我喜欢的是 Git Lens ， G-I-T-L-E-N-S
好奇怪呀
今天的搜索这是不工作了嘛
其实 Git Lens 在中间啦
Git Lens 非常非常好用的
让你知道什么时候，谁改动了你的代码
好的. 那么
类似于如何在 Visual Studio 中这样做
在那里你可以真正地观察每个人
是的，就像监察一样，如果你想知道是谁的错
所以两天前你可以看到这是 Eric 的错
他改变了这一些
是啊，我也看到你的名字了
我在开玩笑
没关系啦
我刚才说的那个是显示的
显示？
如果任何人透露 JS ，实际上它让你
在浏览器中会有一个 slide 的记录
是啊，所以你有编辑，获取拓展插件
做各种事的能力
是的
并不是有理由 必须要用 VS Code
但是如果你今天像我们一样刚刚开始
Visual Studio Code 将是你
编辑和调试体验的最佳选择
是的
好吧 好吧
我们休息一会儿马上回来
